
Haut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001620  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000108  2000000c  0000162c  0002000c  2**2
                  ALLOC
  3 .stack        00002004  20000114  00001734  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023f8d  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039a0  00000000  00000000  0004401a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000043eb  00000000  00000000  000479ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004f8  00000000  00000000  0004bda5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000560  00000000  00000000  0004c29d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00005db8  00000000  00000000  0004c7fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b78e  00000000  00000000  000525b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005f3c4  00000000  00000000  0005dd43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000b68  00000000  00000000  000bd108  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	18 21 00 20 05 13 00 00 01 13 00 00 01 13 00 00     .!. ............
	...
      2c:	01 13 00 00 00 00 00 00 00 00 00 00 01 13 00 00     ................
      3c:	01 13 00 00 01 13 00 00 01 13 00 00 01 13 00 00     ................
      4c:	01 13 00 00 19 02 00 00 01 13 00 00 01 13 00 00     ................
      5c:	c9 0a 00 00 d9 0a 00 00 e9 0a 00 00 f9 0a 00 00     ................
      6c:	09 0b 00 00 19 0b 00 00 8d 0b 00 00 9d 0b 00 00     ................
      7c:	ad 0b 00 00 bd 0b 00 00 cd 0b 00 00 dd 0b 00 00     ................
      8c:	ed 0b 00 00 fd 0b 00 00 01 13 00 00 01 13 00 00     ................
      9c:	01 13 00 00 01 13 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	2000000c 	.word	0x2000000c
      c4:	00000000 	.word	0x00000000
      c8:	00001620 	.word	0x00001620

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000010 	.word	0x20000010
      f8:	00001620 	.word	0x00001620
      fc:	00001620 	.word	0x00001620
     100:	00000000 	.word	0x00000000

00000104 <usart_read_callback>:
	//delay_s(1);
	//usart_write_buffer_job(&usart_wifi_instance, (uint8_t *)wifi_transmitbuff, 10);
	//usart_write_buffer_job(&usart_ble_instance, (uint8_t *)wifi_rx_buffer, 10);
	//usart_write_buffer_job(&usart_ble_instance,
	//(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
}
     104:	4770      	bx	lr

00000106 <usart_write_callback>:

static void usart_write_callback(struct usart_module *const usart_module)
{
	//port_pin_toggle_output_level(LED_PIN);
	//port_pin_set_output_level(LED_PIN, false);
}
     106:	4770      	bx	lr

00000108 <configure_wifi_usart>:
//! [callback_funcs]


void configure_wifi_usart(void)
{
     108:	b5f0      	push	{r4, r5, r6, r7, lr}
     10a:	b08f      	sub	sp, #60	; 0x3c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     10c:	ab02      	add	r3, sp, #8
     10e:	2280      	movs	r2, #128	; 0x80
     110:	05d2      	lsls	r2, r2, #23
     112:	9202      	str	r2, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     114:	2200      	movs	r2, #0
     116:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     118:	21ff      	movs	r1, #255	; 0xff
     11a:	8119      	strh	r1, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     11c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     11e:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     120:	39fe      	subs	r1, #254	; 0xfe
     122:	7519      	strb	r1, [r3, #20]
	config->transmitter_enable = true;
     124:	7559      	strb	r1, [r3, #21]
	config->clock_polarity_inverted = false;
     126:	759a      	strb	r2, [r3, #22]
	config->use_external_clock = false;
     128:	75da      	strb	r2, [r3, #23]
	config->ext_clock_freq   = 0;
     12a:	619a      	str	r2, [r3, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     12c:	771a      	strb	r2, [r3, #28]
	config->generator_source = GCLK_GENERATOR_0;
     12e:	775a      	strb	r2, [r3, #29]
	struct usart_config wifi_configure_usart;
	usart_get_config_defaults(&wifi_configure_usart);

	wifi_configure_usart.baudrate    = 115200;
     130:	22e1      	movs	r2, #225	; 0xe1
     132:	0252      	lsls	r2, r2, #9
     134:	611a      	str	r2, [r3, #16]
	wifi_configure_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
     136:	2280      	movs	r2, #128	; 0x80
     138:	0352      	lsls	r2, r2, #13
     13a:	60da      	str	r2, [r3, #12]
	wifi_configure_usart.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;//PINMUX_PA25C_SERCOM3_PAD3
     13c:	4a1f      	ldr	r2, [pc, #124]	; (1bc <configure_wifi_usart+0xb4>)
     13e:	621a      	str	r2, [r3, #32]
	wifi_configure_usart.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
     140:	4a1f      	ldr	r2, [pc, #124]	; (1c0 <configure_wifi_usart+0xb8>)
     142:	625a      	str	r2, [r3, #36]	; 0x24
	wifi_configure_usart.pinmux_pad2 = PINMUX_UNUSED;
     144:	2201      	movs	r2, #1
     146:	4252      	negs	r2, r2
     148:	629a      	str	r2, [r3, #40]	; 0x28
	wifi_configure_usart.pinmux_pad3 = PINMUX_UNUSED;
     14a:	62da      	str	r2, [r3, #44]	; 0x2c

	while (usart_init(&usart_wifi_instance,SERCOM0, &wifi_configure_usart) != STATUS_OK) {
     14c:	4d1d      	ldr	r5, [pc, #116]	; (1c4 <configure_wifi_usart+0xbc>)
     14e:	4c1e      	ldr	r4, [pc, #120]	; (1c8 <configure_wifi_usart+0xc0>)
     150:	aa02      	add	r2, sp, #8
     152:	491e      	ldr	r1, [pc, #120]	; (1cc <configure_wifi_usart+0xc4>)
     154:	0028      	movs	r0, r5
     156:	47a0      	blx	r4
     158:	2800      	cmp	r0, #0
     15a:	d1f9      	bne.n	150 <configure_wifi_usart+0x48>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     15c:	4d19      	ldr	r5, [pc, #100]	; (1c4 <configure_wifi_usart+0xbc>)
     15e:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     160:	0020      	movs	r0, r4
     162:	4b1b      	ldr	r3, [pc, #108]	; (1d0 <configure_wifi_usart+0xc8>)
     164:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     166:	231f      	movs	r3, #31
     168:	4018      	ands	r0, r3
     16a:	3b1e      	subs	r3, #30
     16c:	4083      	lsls	r3, r0
     16e:	4a19      	ldr	r2, [pc, #100]	; (1d4 <configure_wifi_usart+0xcc>)
     170:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     172:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     174:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     176:	b21b      	sxth	r3, r3
     178:	2b00      	cmp	r3, #0
     17a:	dbfb      	blt.n	174 <configure_wifi_usart+0x6c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     17c:	6823      	ldr	r3, [r4, #0]
     17e:	2202      	movs	r2, #2
     180:	4313      	orrs	r3, r2
     182:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     184:	ac01      	add	r4, sp, #4
     186:	2301      	movs	r3, #1
     188:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
     18a:	2200      	movs	r2, #0
     18c:	70a2      	strb	r2, [r4, #2]
	
	//!other_pin_init
	struct port_config pin_config;
	port_get_config_defaults(&pin_config);
	
	pin_config.direction = PORT_PIN_DIR_OUTPUT;
     18e:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(WIFI_VDD_PIN,&pin_config);
     190:	0021      	movs	r1, r4
     192:	202a      	movs	r0, #42	; 0x2a
     194:	4d10      	ldr	r5, [pc, #64]	; (1d8 <configure_wifi_usart+0xd0>)
     196:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     198:	4e10      	ldr	r6, [pc, #64]	; (1dc <configure_wifi_usart+0xd4>)
     19a:	2780      	movs	r7, #128	; 0x80
     19c:	00ff      	lsls	r7, r7, #3
     19e:	4b10      	ldr	r3, [pc, #64]	; (1e0 <configure_wifi_usart+0xd8>)
     1a0:	619f      	str	r7, [r3, #24]
	wifi_power(true);
	port_pin_set_config(WIFI_SLEEPOUT_PIN,&pin_config);
     1a2:	0021      	movs	r1, r4
     1a4:	200b      	movs	r0, #11
     1a6:	47a8      	blx	r5
     1a8:	2380      	movs	r3, #128	; 0x80
     1aa:	011b      	lsls	r3, r3, #4
     1ac:	61b3      	str	r3, [r6, #24]
	wifi_sleep(false);
	port_pin_set_config(WIFI_RST_PIN,&pin_config);
     1ae:	0021      	movs	r1, r4
     1b0:	200a      	movs	r0, #10
     1b2:	47a8      	blx	r5
     1b4:	61b7      	str	r7, [r6, #24]
	wifi_reset(false);
			
}
     1b6:	b00f      	add	sp, #60	; 0x3c
     1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	00080002 	.word	0x00080002
     1c0:	00090002 	.word	0x00090002
     1c4:	20000074 	.word	0x20000074
     1c8:	000006c9 	.word	0x000006c9
     1cc:	42000800 	.word	0x42000800
     1d0:	00000a99 	.word	0x00000a99
     1d4:	e000e100 	.word	0xe000e100
     1d8:	00000331 	.word	0x00000331
     1dc:	41004400 	.word	0x41004400
     1e0:	41004480 	.word	0x41004480

000001e4 <configure_wifi_callbacks>:

void configure_wifi_callbacks(void)
{
     1e4:	b570      	push	{r4, r5, r6, lr}
	//! [setup_register_callbacks]
	usart_register_callback(&usart_wifi_instance,
     1e6:	4c08      	ldr	r4, [pc, #32]	; (208 <configure_wifi_callbacks+0x24>)
     1e8:	2200      	movs	r2, #0
     1ea:	4908      	ldr	r1, [pc, #32]	; (20c <configure_wifi_callbacks+0x28>)
     1ec:	0020      	movs	r0, r4
     1ee:	4d08      	ldr	r5, [pc, #32]	; (210 <configure_wifi_callbacks+0x2c>)
     1f0:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_wifi_instance,
     1f2:	2201      	movs	r2, #1
     1f4:	4907      	ldr	r1, [pc, #28]	; (214 <configure_wifi_callbacks+0x30>)
     1f6:	0020      	movs	r0, r4
     1f8:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     1fa:	2221      	movs	r2, #33	; 0x21
     1fc:	5ca3      	ldrb	r3, [r4, r2]
     1fe:	2103      	movs	r1, #3
     200:	430b      	orrs	r3, r1
     202:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(&usart_wifi_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_wifi_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
     204:	bd70      	pop	{r4, r5, r6, pc}
     206:	46c0      	nop			; (mov r8, r8)
     208:	20000074 	.word	0x20000074
     20c:	00000107 	.word	0x00000107
     210:	0000091d 	.word	0x0000091d
     214:	00000105 	.word	0x00000105

00000218 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     218:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     21a:	2200      	movs	r2, #0
     21c:	4b10      	ldr	r3, [pc, #64]	; (260 <EIC_Handler+0x48>)
     21e:	701a      	strb	r2, [r3, #0]
     220:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     222:	4910      	ldr	r1, [pc, #64]	; (264 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     224:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     226:	4e10      	ldr	r6, [pc, #64]	; (268 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     228:	4c0d      	ldr	r4, [pc, #52]	; (260 <EIC_Handler+0x48>)
     22a:	e00a      	b.n	242 <EIC_Handler+0x2a>
		return eics[eic_index];
     22c:	490d      	ldr	r1, [pc, #52]	; (264 <EIC_Handler+0x4c>)
     22e:	e008      	b.n	242 <EIC_Handler+0x2a>
     230:	7823      	ldrb	r3, [r4, #0]
     232:	3301      	adds	r3, #1
     234:	b2db      	uxtb	r3, r3
     236:	7023      	strb	r3, [r4, #0]
     238:	2b0f      	cmp	r3, #15
     23a:	d810      	bhi.n	25e <EIC_Handler+0x46>
		return NULL;
     23c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     23e:	2b1f      	cmp	r3, #31
     240:	d9f4      	bls.n	22c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     242:	0028      	movs	r0, r5
     244:	4018      	ands	r0, r3
     246:	2201      	movs	r2, #1
     248:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     24a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     24c:	4210      	tst	r0, r2
     24e:	d0ef      	beq.n	230 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     250:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     252:	009b      	lsls	r3, r3, #2
     254:	599b      	ldr	r3, [r3, r6]
     256:	2b00      	cmp	r3, #0
     258:	d0ea      	beq.n	230 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     25a:	4798      	blx	r3
     25c:	e7e8      	b.n	230 <EIC_Handler+0x18>
			}
		}
	}
}
     25e:	bd70      	pop	{r4, r5, r6, pc}
     260:	20000098 	.word	0x20000098
     264:	40001800 	.word	0x40001800
     268:	2000009c 	.word	0x2000009c

0000026c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     26c:	4a04      	ldr	r2, [pc, #16]	; (280 <_extint_enable+0x14>)
     26e:	7813      	ldrb	r3, [r2, #0]
     270:	2102      	movs	r1, #2
     272:	430b      	orrs	r3, r1
     274:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     276:	7853      	ldrb	r3, [r2, #1]
     278:	b25b      	sxtb	r3, r3
     27a:	2b00      	cmp	r3, #0
     27c:	dbfb      	blt.n	276 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     27e:	4770      	bx	lr
     280:	40001800 	.word	0x40001800

00000284 <_system_extint_init>:
{
     284:	b500      	push	{lr}
     286:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     288:	4a12      	ldr	r2, [pc, #72]	; (2d4 <_system_extint_init+0x50>)
     28a:	6993      	ldr	r3, [r2, #24]
     28c:	2140      	movs	r1, #64	; 0x40
     28e:	430b      	orrs	r3, r1
     290:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     292:	a901      	add	r1, sp, #4
     294:	2300      	movs	r3, #0
     296:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     298:	2003      	movs	r0, #3
     29a:	4b0f      	ldr	r3, [pc, #60]	; (2d8 <_system_extint_init+0x54>)
     29c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     29e:	2003      	movs	r0, #3
     2a0:	4b0e      	ldr	r3, [pc, #56]	; (2dc <_system_extint_init+0x58>)
     2a2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     2a4:	4a0e      	ldr	r2, [pc, #56]	; (2e0 <_system_extint_init+0x5c>)
     2a6:	7813      	ldrb	r3, [r2, #0]
     2a8:	2101      	movs	r1, #1
     2aa:	430b      	orrs	r3, r1
     2ac:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     2ae:	7853      	ldrb	r3, [r2, #1]
     2b0:	b25b      	sxtb	r3, r3
     2b2:	2b00      	cmp	r3, #0
     2b4:	dbfb      	blt.n	2ae <_system_extint_init+0x2a>
     2b6:	4b0b      	ldr	r3, [pc, #44]	; (2e4 <_system_extint_init+0x60>)
     2b8:	0019      	movs	r1, r3
     2ba:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     2bc:	2200      	movs	r2, #0
     2be:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     2c0:	4299      	cmp	r1, r3
     2c2:	d1fc      	bne.n	2be <_system_extint_init+0x3a>
     2c4:	2210      	movs	r2, #16
     2c6:	4b08      	ldr	r3, [pc, #32]	; (2e8 <_system_extint_init+0x64>)
     2c8:	601a      	str	r2, [r3, #0]
	_extint_enable();
     2ca:	4b08      	ldr	r3, [pc, #32]	; (2ec <_system_extint_init+0x68>)
     2cc:	4798      	blx	r3
}
     2ce:	b003      	add	sp, #12
     2d0:	bd00      	pop	{pc}
     2d2:	46c0      	nop			; (mov r8, r8)
     2d4:	40000400 	.word	0x40000400
     2d8:	000011a9 	.word	0x000011a9
     2dc:	0000111d 	.word	0x0000111d
     2e0:	40001800 	.word	0x40001800
     2e4:	2000009c 	.word	0x2000009c
     2e8:	e000e100 	.word	0xe000e100
     2ec:	0000026d 	.word	0x0000026d

000002f0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     2f0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     2f2:	2000      	movs	r0, #0
     2f4:	4b08      	ldr	r3, [pc, #32]	; (318 <delay_init+0x28>)
     2f6:	4798      	blx	r3
     2f8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     2fa:	4c08      	ldr	r4, [pc, #32]	; (31c <delay_init+0x2c>)
     2fc:	21fa      	movs	r1, #250	; 0xfa
     2fe:	0089      	lsls	r1, r1, #2
     300:	47a0      	blx	r4
     302:	4b07      	ldr	r3, [pc, #28]	; (320 <delay_init+0x30>)
     304:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     306:	4907      	ldr	r1, [pc, #28]	; (324 <delay_init+0x34>)
     308:	0028      	movs	r0, r5
     30a:	47a0      	blx	r4
     30c:	4b06      	ldr	r3, [pc, #24]	; (328 <delay_init+0x38>)
     30e:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     310:	2205      	movs	r2, #5
     312:	4b06      	ldr	r3, [pc, #24]	; (32c <delay_init+0x3c>)
     314:	601a      	str	r2, [r3, #0]
}
     316:	bd70      	pop	{r4, r5, r6, pc}
     318:	00001091 	.word	0x00001091
     31c:	000013f5 	.word	0x000013f5
     320:	20000000 	.word	0x20000000
     324:	000f4240 	.word	0x000f4240
     328:	20000004 	.word	0x20000004
     32c:	e000e010 	.word	0xe000e010

00000330 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     330:	b500      	push	{lr}
     332:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     334:	ab01      	add	r3, sp, #4
     336:	2280      	movs	r2, #128	; 0x80
     338:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     33a:	780a      	ldrb	r2, [r1, #0]
     33c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     33e:	784a      	ldrb	r2, [r1, #1]
     340:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     342:	788a      	ldrb	r2, [r1, #2]
     344:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     346:	0019      	movs	r1, r3
     348:	4b01      	ldr	r3, [pc, #4]	; (350 <port_pin_set_config+0x20>)
     34a:	4798      	blx	r3
}
     34c:	b003      	add	sp, #12
     34e:	bd00      	pop	{pc}
     350:	000012a1 	.word	0x000012a1

00000354 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     354:	b5f0      	push	{r4, r5, r6, r7, lr}
     356:	46de      	mov	lr, fp
     358:	4657      	mov	r7, sl
     35a:	464e      	mov	r6, r9
     35c:	4645      	mov	r5, r8
     35e:	b5e0      	push	{r5, r6, r7, lr}
     360:	b087      	sub	sp, #28
     362:	4680      	mov	r8, r0
     364:	9104      	str	r1, [sp, #16]
     366:	0016      	movs	r6, r2
     368:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     36a:	2200      	movs	r2, #0
     36c:	2300      	movs	r3, #0
     36e:	2100      	movs	r1, #0
     370:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     372:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     374:	2001      	movs	r0, #1
     376:	0021      	movs	r1, r4
     378:	9600      	str	r6, [sp, #0]
     37a:	9701      	str	r7, [sp, #4]
     37c:	465c      	mov	r4, fp
     37e:	9403      	str	r4, [sp, #12]
     380:	4644      	mov	r4, r8
     382:	9405      	str	r4, [sp, #20]
     384:	e013      	b.n	3ae <long_division+0x5a>
     386:	2420      	movs	r4, #32
     388:	1a64      	subs	r4, r4, r1
     38a:	0005      	movs	r5, r0
     38c:	40e5      	lsrs	r5, r4
     38e:	46a8      	mov	r8, r5
     390:	e014      	b.n	3bc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     392:	9c00      	ldr	r4, [sp, #0]
     394:	9d01      	ldr	r5, [sp, #4]
     396:	1b12      	subs	r2, r2, r4
     398:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     39a:	465c      	mov	r4, fp
     39c:	464d      	mov	r5, r9
     39e:	432c      	orrs	r4, r5
     3a0:	46a3      	mov	fp, r4
     3a2:	9c03      	ldr	r4, [sp, #12]
     3a4:	4645      	mov	r5, r8
     3a6:	432c      	orrs	r4, r5
     3a8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     3aa:	3901      	subs	r1, #1
     3ac:	d325      	bcc.n	3fa <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     3ae:	2420      	movs	r4, #32
     3b0:	4264      	negs	r4, r4
     3b2:	190c      	adds	r4, r1, r4
     3b4:	d4e7      	bmi.n	386 <long_division+0x32>
     3b6:	0005      	movs	r5, r0
     3b8:	40a5      	lsls	r5, r4
     3ba:	46a8      	mov	r8, r5
     3bc:	0004      	movs	r4, r0
     3be:	408c      	lsls	r4, r1
     3c0:	46a1      	mov	r9, r4
		r = r << 1;
     3c2:	1892      	adds	r2, r2, r2
     3c4:	415b      	adcs	r3, r3
     3c6:	0014      	movs	r4, r2
     3c8:	001d      	movs	r5, r3
		if (n & bit_shift) {
     3ca:	9e05      	ldr	r6, [sp, #20]
     3cc:	464f      	mov	r7, r9
     3ce:	403e      	ands	r6, r7
     3d0:	46b4      	mov	ip, r6
     3d2:	9e04      	ldr	r6, [sp, #16]
     3d4:	4647      	mov	r7, r8
     3d6:	403e      	ands	r6, r7
     3d8:	46b2      	mov	sl, r6
     3da:	4666      	mov	r6, ip
     3dc:	4657      	mov	r7, sl
     3de:	433e      	orrs	r6, r7
     3e0:	d003      	beq.n	3ea <long_division+0x96>
			r |= 0x01;
     3e2:	0006      	movs	r6, r0
     3e4:	4326      	orrs	r6, r4
     3e6:	0032      	movs	r2, r6
     3e8:	002b      	movs	r3, r5
		if (r >= d) {
     3ea:	9c00      	ldr	r4, [sp, #0]
     3ec:	9d01      	ldr	r5, [sp, #4]
     3ee:	429d      	cmp	r5, r3
     3f0:	d8db      	bhi.n	3aa <long_division+0x56>
     3f2:	d1ce      	bne.n	392 <long_division+0x3e>
     3f4:	4294      	cmp	r4, r2
     3f6:	d8d8      	bhi.n	3aa <long_division+0x56>
     3f8:	e7cb      	b.n	392 <long_division+0x3e>
     3fa:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     3fc:	4658      	mov	r0, fp
     3fe:	0019      	movs	r1, r3
     400:	b007      	add	sp, #28
     402:	bc3c      	pop	{r2, r3, r4, r5}
     404:	4690      	mov	r8, r2
     406:	4699      	mov	r9, r3
     408:	46a2      	mov	sl, r4
     40a:	46ab      	mov	fp, r5
     40c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000040e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     40e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     410:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     412:	2340      	movs	r3, #64	; 0x40
     414:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     416:	4281      	cmp	r1, r0
     418:	d202      	bcs.n	420 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     41a:	0018      	movs	r0, r3
     41c:	bd10      	pop	{r4, pc}
		baud_calculated++;
     41e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     420:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     422:	1c63      	adds	r3, r4, #1
     424:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     426:	4288      	cmp	r0, r1
     428:	d9f9      	bls.n	41e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     42a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     42c:	2cff      	cmp	r4, #255	; 0xff
     42e:	d8f4      	bhi.n	41a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     430:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     432:	2300      	movs	r3, #0
     434:	e7f1      	b.n	41a <_sercom_get_sync_baud_val+0xc>
	...

00000438 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     438:	b5f0      	push	{r4, r5, r6, r7, lr}
     43a:	b083      	sub	sp, #12
     43c:	000f      	movs	r7, r1
     43e:	0016      	movs	r6, r2
     440:	aa08      	add	r2, sp, #32
     442:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     444:	0004      	movs	r4, r0
     446:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     448:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     44a:	42bc      	cmp	r4, r7
     44c:	d902      	bls.n	454 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     44e:	0010      	movs	r0, r2
     450:	b003      	add	sp, #12
     452:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     454:	2b00      	cmp	r3, #0
     456:	d114      	bne.n	482 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     458:	0002      	movs	r2, r0
     45a:	0008      	movs	r0, r1
     45c:	2100      	movs	r1, #0
     45e:	4c19      	ldr	r4, [pc, #100]	; (4c4 <_sercom_get_async_baud_val+0x8c>)
     460:	47a0      	blx	r4
     462:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     464:	003a      	movs	r2, r7
     466:	2300      	movs	r3, #0
     468:	2000      	movs	r0, #0
     46a:	4c17      	ldr	r4, [pc, #92]	; (4c8 <_sercom_get_async_baud_val+0x90>)
     46c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     46e:	2200      	movs	r2, #0
     470:	2301      	movs	r3, #1
     472:	1a12      	subs	r2, r2, r0
     474:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     476:	0c12      	lsrs	r2, r2, #16
     478:	041b      	lsls	r3, r3, #16
     47a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     47c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     47e:	2200      	movs	r2, #0
     480:	e7e5      	b.n	44e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     482:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     484:	2b01      	cmp	r3, #1
     486:	d1f9      	bne.n	47c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     488:	000a      	movs	r2, r1
     48a:	2300      	movs	r3, #0
     48c:	2100      	movs	r1, #0
     48e:	4c0d      	ldr	r4, [pc, #52]	; (4c4 <_sercom_get_async_baud_val+0x8c>)
     490:	47a0      	blx	r4
     492:	0002      	movs	r2, r0
     494:	000b      	movs	r3, r1
     496:	9200      	str	r2, [sp, #0]
     498:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     49a:	0038      	movs	r0, r7
     49c:	2100      	movs	r1, #0
     49e:	4c0a      	ldr	r4, [pc, #40]	; (4c8 <_sercom_get_async_baud_val+0x90>)
     4a0:	47a0      	blx	r4
     4a2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     4a4:	2380      	movs	r3, #128	; 0x80
     4a6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4a8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     4aa:	4298      	cmp	r0, r3
     4ac:	d8cf      	bhi.n	44e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     4ae:	0f79      	lsrs	r1, r7, #29
     4b0:	00f8      	lsls	r0, r7, #3
     4b2:	9a00      	ldr	r2, [sp, #0]
     4b4:	9b01      	ldr	r3, [sp, #4]
     4b6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     4b8:	00ea      	lsls	r2, r5, #3
     4ba:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     4bc:	b2d2      	uxtb	r2, r2
     4be:	0352      	lsls	r2, r2, #13
     4c0:	432a      	orrs	r2, r5
     4c2:	e7db      	b.n	47c <_sercom_get_async_baud_val+0x44>
     4c4:	0000150d 	.word	0x0000150d
     4c8:	00000355 	.word	0x00000355

000004cc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     4cc:	b510      	push	{r4, lr}
     4ce:	b082      	sub	sp, #8
     4d0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     4d2:	4b0e      	ldr	r3, [pc, #56]	; (50c <sercom_set_gclk_generator+0x40>)
     4d4:	781b      	ldrb	r3, [r3, #0]
     4d6:	2b00      	cmp	r3, #0
     4d8:	d007      	beq.n	4ea <sercom_set_gclk_generator+0x1e>
     4da:	2900      	cmp	r1, #0
     4dc:	d105      	bne.n	4ea <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     4de:	4b0b      	ldr	r3, [pc, #44]	; (50c <sercom_set_gclk_generator+0x40>)
     4e0:	785b      	ldrb	r3, [r3, #1]
     4e2:	4283      	cmp	r3, r0
     4e4:	d010      	beq.n	508 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     4e6:	201d      	movs	r0, #29
     4e8:	e00c      	b.n	504 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     4ea:	a901      	add	r1, sp, #4
     4ec:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     4ee:	200c      	movs	r0, #12
     4f0:	4b07      	ldr	r3, [pc, #28]	; (510 <sercom_set_gclk_generator+0x44>)
     4f2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     4f4:	200c      	movs	r0, #12
     4f6:	4b07      	ldr	r3, [pc, #28]	; (514 <sercom_set_gclk_generator+0x48>)
     4f8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     4fa:	4b04      	ldr	r3, [pc, #16]	; (50c <sercom_set_gclk_generator+0x40>)
     4fc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     4fe:	2201      	movs	r2, #1
     500:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     502:	2000      	movs	r0, #0
}
     504:	b002      	add	sp, #8
     506:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     508:	2000      	movs	r0, #0
     50a:	e7fb      	b.n	504 <sercom_set_gclk_generator+0x38>
     50c:	20000028 	.word	0x20000028
     510:	000011a9 	.word	0x000011a9
     514:	0000111d 	.word	0x0000111d

00000518 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     518:	4b40      	ldr	r3, [pc, #256]	; (61c <_sercom_get_default_pad+0x104>)
     51a:	4298      	cmp	r0, r3
     51c:	d031      	beq.n	582 <_sercom_get_default_pad+0x6a>
     51e:	d90a      	bls.n	536 <_sercom_get_default_pad+0x1e>
     520:	4b3f      	ldr	r3, [pc, #252]	; (620 <_sercom_get_default_pad+0x108>)
     522:	4298      	cmp	r0, r3
     524:	d04d      	beq.n	5c2 <_sercom_get_default_pad+0xaa>
     526:	4b3f      	ldr	r3, [pc, #252]	; (624 <_sercom_get_default_pad+0x10c>)
     528:	4298      	cmp	r0, r3
     52a:	d05a      	beq.n	5e2 <_sercom_get_default_pad+0xca>
     52c:	4b3e      	ldr	r3, [pc, #248]	; (628 <_sercom_get_default_pad+0x110>)
     52e:	4298      	cmp	r0, r3
     530:	d037      	beq.n	5a2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     532:	2000      	movs	r0, #0
}
     534:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     536:	4b3d      	ldr	r3, [pc, #244]	; (62c <_sercom_get_default_pad+0x114>)
     538:	4298      	cmp	r0, r3
     53a:	d00c      	beq.n	556 <_sercom_get_default_pad+0x3e>
     53c:	4b3c      	ldr	r3, [pc, #240]	; (630 <_sercom_get_default_pad+0x118>)
     53e:	4298      	cmp	r0, r3
     540:	d1f7      	bne.n	532 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     542:	2901      	cmp	r1, #1
     544:	d017      	beq.n	576 <_sercom_get_default_pad+0x5e>
     546:	2900      	cmp	r1, #0
     548:	d05d      	beq.n	606 <_sercom_get_default_pad+0xee>
     54a:	2902      	cmp	r1, #2
     54c:	d015      	beq.n	57a <_sercom_get_default_pad+0x62>
     54e:	2903      	cmp	r1, #3
     550:	d015      	beq.n	57e <_sercom_get_default_pad+0x66>
	return 0;
     552:	2000      	movs	r0, #0
     554:	e7ee      	b.n	534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     556:	2901      	cmp	r1, #1
     558:	d007      	beq.n	56a <_sercom_get_default_pad+0x52>
     55a:	2900      	cmp	r1, #0
     55c:	d051      	beq.n	602 <_sercom_get_default_pad+0xea>
     55e:	2902      	cmp	r1, #2
     560:	d005      	beq.n	56e <_sercom_get_default_pad+0x56>
     562:	2903      	cmp	r1, #3
     564:	d005      	beq.n	572 <_sercom_get_default_pad+0x5a>
	return 0;
     566:	2000      	movs	r0, #0
     568:	e7e4      	b.n	534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     56a:	4832      	ldr	r0, [pc, #200]	; (634 <_sercom_get_default_pad+0x11c>)
     56c:	e7e2      	b.n	534 <_sercom_get_default_pad+0x1c>
     56e:	4832      	ldr	r0, [pc, #200]	; (638 <_sercom_get_default_pad+0x120>)
     570:	e7e0      	b.n	534 <_sercom_get_default_pad+0x1c>
     572:	4832      	ldr	r0, [pc, #200]	; (63c <_sercom_get_default_pad+0x124>)
     574:	e7de      	b.n	534 <_sercom_get_default_pad+0x1c>
     576:	4832      	ldr	r0, [pc, #200]	; (640 <_sercom_get_default_pad+0x128>)
     578:	e7dc      	b.n	534 <_sercom_get_default_pad+0x1c>
     57a:	4832      	ldr	r0, [pc, #200]	; (644 <_sercom_get_default_pad+0x12c>)
     57c:	e7da      	b.n	534 <_sercom_get_default_pad+0x1c>
     57e:	4832      	ldr	r0, [pc, #200]	; (648 <_sercom_get_default_pad+0x130>)
     580:	e7d8      	b.n	534 <_sercom_get_default_pad+0x1c>
     582:	2901      	cmp	r1, #1
     584:	d007      	beq.n	596 <_sercom_get_default_pad+0x7e>
     586:	2900      	cmp	r1, #0
     588:	d03f      	beq.n	60a <_sercom_get_default_pad+0xf2>
     58a:	2902      	cmp	r1, #2
     58c:	d005      	beq.n	59a <_sercom_get_default_pad+0x82>
     58e:	2903      	cmp	r1, #3
     590:	d005      	beq.n	59e <_sercom_get_default_pad+0x86>
	return 0;
     592:	2000      	movs	r0, #0
     594:	e7ce      	b.n	534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     596:	482d      	ldr	r0, [pc, #180]	; (64c <_sercom_get_default_pad+0x134>)
     598:	e7cc      	b.n	534 <_sercom_get_default_pad+0x1c>
     59a:	482d      	ldr	r0, [pc, #180]	; (650 <_sercom_get_default_pad+0x138>)
     59c:	e7ca      	b.n	534 <_sercom_get_default_pad+0x1c>
     59e:	482d      	ldr	r0, [pc, #180]	; (654 <_sercom_get_default_pad+0x13c>)
     5a0:	e7c8      	b.n	534 <_sercom_get_default_pad+0x1c>
     5a2:	2901      	cmp	r1, #1
     5a4:	d007      	beq.n	5b6 <_sercom_get_default_pad+0x9e>
     5a6:	2900      	cmp	r1, #0
     5a8:	d031      	beq.n	60e <_sercom_get_default_pad+0xf6>
     5aa:	2902      	cmp	r1, #2
     5ac:	d005      	beq.n	5ba <_sercom_get_default_pad+0xa2>
     5ae:	2903      	cmp	r1, #3
     5b0:	d005      	beq.n	5be <_sercom_get_default_pad+0xa6>
	return 0;
     5b2:	2000      	movs	r0, #0
     5b4:	e7be      	b.n	534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5b6:	4828      	ldr	r0, [pc, #160]	; (658 <_sercom_get_default_pad+0x140>)
     5b8:	e7bc      	b.n	534 <_sercom_get_default_pad+0x1c>
     5ba:	4828      	ldr	r0, [pc, #160]	; (65c <_sercom_get_default_pad+0x144>)
     5bc:	e7ba      	b.n	534 <_sercom_get_default_pad+0x1c>
     5be:	4828      	ldr	r0, [pc, #160]	; (660 <_sercom_get_default_pad+0x148>)
     5c0:	e7b8      	b.n	534 <_sercom_get_default_pad+0x1c>
     5c2:	2901      	cmp	r1, #1
     5c4:	d007      	beq.n	5d6 <_sercom_get_default_pad+0xbe>
     5c6:	2900      	cmp	r1, #0
     5c8:	d023      	beq.n	612 <_sercom_get_default_pad+0xfa>
     5ca:	2902      	cmp	r1, #2
     5cc:	d005      	beq.n	5da <_sercom_get_default_pad+0xc2>
     5ce:	2903      	cmp	r1, #3
     5d0:	d005      	beq.n	5de <_sercom_get_default_pad+0xc6>
	return 0;
     5d2:	2000      	movs	r0, #0
     5d4:	e7ae      	b.n	534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5d6:	4823      	ldr	r0, [pc, #140]	; (664 <_sercom_get_default_pad+0x14c>)
     5d8:	e7ac      	b.n	534 <_sercom_get_default_pad+0x1c>
     5da:	4823      	ldr	r0, [pc, #140]	; (668 <_sercom_get_default_pad+0x150>)
     5dc:	e7aa      	b.n	534 <_sercom_get_default_pad+0x1c>
     5de:	4823      	ldr	r0, [pc, #140]	; (66c <_sercom_get_default_pad+0x154>)
     5e0:	e7a8      	b.n	534 <_sercom_get_default_pad+0x1c>
     5e2:	2901      	cmp	r1, #1
     5e4:	d007      	beq.n	5f6 <_sercom_get_default_pad+0xde>
     5e6:	2900      	cmp	r1, #0
     5e8:	d015      	beq.n	616 <_sercom_get_default_pad+0xfe>
     5ea:	2902      	cmp	r1, #2
     5ec:	d005      	beq.n	5fa <_sercom_get_default_pad+0xe2>
     5ee:	2903      	cmp	r1, #3
     5f0:	d005      	beq.n	5fe <_sercom_get_default_pad+0xe6>
	return 0;
     5f2:	2000      	movs	r0, #0
     5f4:	e79e      	b.n	534 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5f6:	481e      	ldr	r0, [pc, #120]	; (670 <_sercom_get_default_pad+0x158>)
     5f8:	e79c      	b.n	534 <_sercom_get_default_pad+0x1c>
     5fa:	481e      	ldr	r0, [pc, #120]	; (674 <_sercom_get_default_pad+0x15c>)
     5fc:	e79a      	b.n	534 <_sercom_get_default_pad+0x1c>
     5fe:	481e      	ldr	r0, [pc, #120]	; (678 <_sercom_get_default_pad+0x160>)
     600:	e798      	b.n	534 <_sercom_get_default_pad+0x1c>
     602:	481e      	ldr	r0, [pc, #120]	; (67c <_sercom_get_default_pad+0x164>)
     604:	e796      	b.n	534 <_sercom_get_default_pad+0x1c>
     606:	2003      	movs	r0, #3
     608:	e794      	b.n	534 <_sercom_get_default_pad+0x1c>
     60a:	481d      	ldr	r0, [pc, #116]	; (680 <_sercom_get_default_pad+0x168>)
     60c:	e792      	b.n	534 <_sercom_get_default_pad+0x1c>
     60e:	481d      	ldr	r0, [pc, #116]	; (684 <_sercom_get_default_pad+0x16c>)
     610:	e790      	b.n	534 <_sercom_get_default_pad+0x1c>
     612:	481d      	ldr	r0, [pc, #116]	; (688 <_sercom_get_default_pad+0x170>)
     614:	e78e      	b.n	534 <_sercom_get_default_pad+0x1c>
     616:	481d      	ldr	r0, [pc, #116]	; (68c <_sercom_get_default_pad+0x174>)
     618:	e78c      	b.n	534 <_sercom_get_default_pad+0x1c>
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	42001000 	.word	0x42001000
     620:	42001800 	.word	0x42001800
     624:	42001c00 	.word	0x42001c00
     628:	42001400 	.word	0x42001400
     62c:	42000800 	.word	0x42000800
     630:	42000c00 	.word	0x42000c00
     634:	00050003 	.word	0x00050003
     638:	00060003 	.word	0x00060003
     63c:	00070003 	.word	0x00070003
     640:	00010003 	.word	0x00010003
     644:	001e0003 	.word	0x001e0003
     648:	001f0003 	.word	0x001f0003
     64c:	00090003 	.word	0x00090003
     650:	000a0003 	.word	0x000a0003
     654:	000b0003 	.word	0x000b0003
     658:	00110003 	.word	0x00110003
     65c:	00120003 	.word	0x00120003
     660:	00130003 	.word	0x00130003
     664:	000d0003 	.word	0x000d0003
     668:	000e0003 	.word	0x000e0003
     66c:	000f0003 	.word	0x000f0003
     670:	00170003 	.word	0x00170003
     674:	00180003 	.word	0x00180003
     678:	00190003 	.word	0x00190003
     67c:	00040003 	.word	0x00040003
     680:	00080003 	.word	0x00080003
     684:	00100003 	.word	0x00100003
     688:	000c0003 	.word	0x000c0003
     68c:	00160003 	.word	0x00160003

00000690 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     690:	b530      	push	{r4, r5, lr}
     692:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     694:	4b0b      	ldr	r3, [pc, #44]	; (6c4 <_sercom_get_sercom_inst_index+0x34>)
     696:	466a      	mov	r2, sp
     698:	cb32      	ldmia	r3!, {r1, r4, r5}
     69a:	c232      	stmia	r2!, {r1, r4, r5}
     69c:	cb32      	ldmia	r3!, {r1, r4, r5}
     69e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6a0:	9b00      	ldr	r3, [sp, #0]
     6a2:	4283      	cmp	r3, r0
     6a4:	d00b      	beq.n	6be <_sercom_get_sercom_inst_index+0x2e>
     6a6:	2301      	movs	r3, #1
     6a8:	009a      	lsls	r2, r3, #2
     6aa:	4669      	mov	r1, sp
     6ac:	5852      	ldr	r2, [r2, r1]
     6ae:	4282      	cmp	r2, r0
     6b0:	d006      	beq.n	6c0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6b2:	3301      	adds	r3, #1
     6b4:	2b06      	cmp	r3, #6
     6b6:	d1f7      	bne.n	6a8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     6b8:	2000      	movs	r0, #0
}
     6ba:	b007      	add	sp, #28
     6bc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6be:	2300      	movs	r3, #0
			return i;
     6c0:	b2d8      	uxtb	r0, r3
     6c2:	e7fa      	b.n	6ba <_sercom_get_sercom_inst_index+0x2a>
     6c4:	000015a8 	.word	0x000015a8

000006c8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ca:	46de      	mov	lr, fp
     6cc:	4657      	mov	r7, sl
     6ce:	464e      	mov	r6, r9
     6d0:	4645      	mov	r5, r8
     6d2:	b5e0      	push	{r5, r6, r7, lr}
     6d4:	b08d      	sub	sp, #52	; 0x34
     6d6:	0005      	movs	r5, r0
     6d8:	000c      	movs	r4, r1
     6da:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     6dc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6de:	0008      	movs	r0, r1
     6e0:	4b80      	ldr	r3, [pc, #512]	; (8e4 <usart_init+0x21c>)
     6e2:	4798      	blx	r3
     6e4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     6e6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     6e8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     6ea:	07db      	lsls	r3, r3, #31
     6ec:	d506      	bpl.n	6fc <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     6ee:	b00d      	add	sp, #52	; 0x34
     6f0:	bc3c      	pop	{r2, r3, r4, r5}
     6f2:	4690      	mov	r8, r2
     6f4:	4699      	mov	r9, r3
     6f6:	46a2      	mov	sl, r4
     6f8:	46ab      	mov	fp, r5
     6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     6fc:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     6fe:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     700:	079b      	lsls	r3, r3, #30
     702:	d4f4      	bmi.n	6ee <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     704:	4978      	ldr	r1, [pc, #480]	; (8e8 <usart_init+0x220>)
     706:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     708:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     70a:	2301      	movs	r3, #1
     70c:	40bb      	lsls	r3, r7
     70e:	4303      	orrs	r3, r0
     710:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     712:	a90b      	add	r1, sp, #44	; 0x2c
     714:	7f73      	ldrb	r3, [r6, #29]
     716:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     718:	320d      	adds	r2, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     71a:	b2d7      	uxtb	r7, r2
     71c:	0038      	movs	r0, r7
     71e:	4b73      	ldr	r3, [pc, #460]	; (8ec <usart_init+0x224>)
     720:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     722:	0038      	movs	r0, r7
     724:	4b72      	ldr	r3, [pc, #456]	; (8f0 <usart_init+0x228>)
     726:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     728:	7f70      	ldrb	r0, [r6, #29]
     72a:	2100      	movs	r1, #0
     72c:	4b71      	ldr	r3, [pc, #452]	; (8f4 <usart_init+0x22c>)
     72e:	4798      	blx	r3
	module->character_size = config->character_size;
     730:	7af3      	ldrb	r3, [r6, #11]
     732:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     734:	7d33      	ldrb	r3, [r6, #20]
     736:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     738:	7d73      	ldrb	r3, [r6, #21]
     73a:	71eb      	strb	r3, [r5, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
     73c:	682b      	ldr	r3, [r5, #0]
     73e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     740:	0018      	movs	r0, r3
     742:	4b68      	ldr	r3, [pc, #416]	; (8e4 <usart_init+0x21c>)
     744:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     746:	300d      	adds	r0, #13
	uint16_t baud  = 0;
     748:	2200      	movs	r2, #0
     74a:	230e      	movs	r3, #14
     74c:	a902      	add	r1, sp, #8
     74e:	468c      	mov	ip, r1
     750:	4463      	add	r3, ip
     752:	801a      	strh	r2, [r3, #0]
	ctrla = (uint32_t)config->data_order |
     754:	6833      	ldr	r3, [r6, #0]
     756:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
     758:	68f3      	ldr	r3, [r6, #12]
     75a:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     75c:	7db3      	ldrb	r3, [r6, #22]
     75e:	469b      	mov	fp, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     760:	6873      	ldr	r3, [r6, #4]
     762:	4699      	mov	r9, r3
	switch (transfer_mode)
     764:	2b00      	cmp	r3, #0
     766:	d014      	beq.n	792 <usart_init+0xca>
     768:	2380      	movs	r3, #128	; 0x80
     76a:	055b      	lsls	r3, r3, #21
     76c:	4599      	cmp	r9, r3
     76e:	d130      	bne.n	7d2 <usart_init+0x10a>
			if (!config->use_external_clock) {
     770:	7df3      	ldrb	r3, [r6, #23]
     772:	2b00      	cmp	r3, #0
     774:	d131      	bne.n	7da <usart_init+0x112>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     776:	6933      	ldr	r3, [r6, #16]
     778:	001f      	movs	r7, r3
     77a:	b2c0      	uxtb	r0, r0
     77c:	4b5e      	ldr	r3, [pc, #376]	; (8f8 <usart_init+0x230>)
     77e:	4798      	blx	r3
     780:	0001      	movs	r1, r0
     782:	220e      	movs	r2, #14
     784:	ab02      	add	r3, sp, #8
     786:	469c      	mov	ip, r3
     788:	4462      	add	r2, ip
     78a:	0038      	movs	r0, r7
     78c:	4b5b      	ldr	r3, [pc, #364]	; (8fc <usart_init+0x234>)
     78e:	4798      	blx	r3
     790:	e020      	b.n	7d4 <usart_init+0x10c>
			if (config->use_external_clock) {
     792:	7df3      	ldrb	r3, [r6, #23]
     794:	2b00      	cmp	r3, #0
     796:	d00b      	beq.n	7b0 <usart_init+0xe8>
				status_code =
     798:	2310      	movs	r3, #16
     79a:	9300      	str	r3, [sp, #0]
     79c:	2300      	movs	r3, #0
     79e:	220e      	movs	r2, #14
     7a0:	a902      	add	r1, sp, #8
     7a2:	468c      	mov	ip, r1
     7a4:	4462      	add	r2, ip
     7a6:	69b1      	ldr	r1, [r6, #24]
     7a8:	6930      	ldr	r0, [r6, #16]
     7aa:	4f55      	ldr	r7, [pc, #340]	; (900 <usart_init+0x238>)
     7ac:	47b8      	blx	r7
     7ae:	e011      	b.n	7d4 <usart_init+0x10c>
						_sercom_get_async_baud_val(config->baudrate,
     7b0:	6933      	ldr	r3, [r6, #16]
     7b2:	001f      	movs	r7, r3
     7b4:	b2c0      	uxtb	r0, r0
     7b6:	4b50      	ldr	r3, [pc, #320]	; (8f8 <usart_init+0x230>)
     7b8:	4798      	blx	r3
     7ba:	0001      	movs	r1, r0
				status_code =
     7bc:	2310      	movs	r3, #16
     7be:	9300      	str	r3, [sp, #0]
     7c0:	2300      	movs	r3, #0
     7c2:	220e      	movs	r2, #14
     7c4:	a802      	add	r0, sp, #8
     7c6:	4684      	mov	ip, r0
     7c8:	4462      	add	r2, ip
     7ca:	0038      	movs	r0, r7
     7cc:	4f4c      	ldr	r7, [pc, #304]	; (900 <usart_init+0x238>)
     7ce:	47b8      	blx	r7
     7d0:	e000      	b.n	7d4 <usart_init+0x10c>
	enum status_code status_code = STATUS_OK;
     7d2:	2000      	movs	r0, #0
	if (status_code != STATUS_OK) {
     7d4:	2800      	cmp	r0, #0
     7d6:	d000      	beq.n	7da <usart_init+0x112>
     7d8:	e789      	b.n	6ee <usart_init+0x26>
	SercomUsart *const usart_hw = &(module->hw->USART);
     7da:	682a      	ldr	r2, [r5, #0]
     7dc:	9f03      	ldr	r7, [sp, #12]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     7de:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     7e0:	b21b      	sxth	r3, r3
     7e2:	2b00      	cmp	r3, #0
     7e4:	dbfb      	blt.n	7de <usart_init+0x116>
	usart_hw->BAUD.reg = baud;
     7e6:	230e      	movs	r3, #14
     7e8:	aa02      	add	r2, sp, #8
     7ea:	4694      	mov	ip, r2
     7ec:	4463      	add	r3, ip
     7ee:	881b      	ldrh	r3, [r3, #0]
     7f0:	4642      	mov	r2, r8
     7f2:	8153      	strh	r3, [r2, #10]
	ctrla |= transfer_mode;
     7f4:	4653      	mov	r3, sl
     7f6:	431f      	orrs	r7, r3
     7f8:	464b      	mov	r3, r9
     7fa:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     7fc:	465b      	mov	r3, fp
     7fe:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     800:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     802:	7df3      	ldrb	r3, [r6, #23]
     804:	2b00      	cmp	r3, #0
     806:	d101      	bne.n	80c <usart_init+0x144>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     808:	3304      	adds	r3, #4
     80a:	431f      	orrs	r7, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     80c:	7d31      	ldrb	r1, [r6, #20]
     80e:	0449      	lsls	r1, r1, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     810:	7d73      	ldrb	r3, [r6, #21]
     812:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     814:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
     816:	7ab1      	ldrb	r1, [r6, #10]
     818:	7af2      	ldrb	r2, [r6, #11]
     81a:	4311      	orrs	r1, r2
     81c:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     81e:	8933      	ldrh	r3, [r6, #8]
     820:	2bff      	cmp	r3, #255	; 0xff
     822:	d003      	beq.n	82c <usart_init+0x164>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     824:	2280      	movs	r2, #128	; 0x80
     826:	0452      	lsls	r2, r2, #17
     828:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     82a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     82c:	7f33      	ldrb	r3, [r6, #28]
     82e:	2b00      	cmp	r3, #0
     830:	d103      	bne.n	83a <usart_init+0x172>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     832:	4b34      	ldr	r3, [pc, #208]	; (904 <usart_init+0x23c>)
     834:	789b      	ldrb	r3, [r3, #2]
     836:	079b      	lsls	r3, r3, #30
     838:	d501      	bpl.n	83e <usart_init+0x176>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     83a:	2380      	movs	r3, #128	; 0x80
     83c:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     83e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     840:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     842:	b21b      	sxth	r3, r3
     844:	2b00      	cmp	r3, #0
     846:	dbfb      	blt.n	840 <usart_init+0x178>
	usart_hw->CTRLB.reg = ctrlb;
     848:	4643      	mov	r3, r8
     84a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     84c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     84e:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     850:	b21b      	sxth	r3, r3
     852:	2b00      	cmp	r3, #0
     854:	dbfb      	blt.n	84e <usart_init+0x186>
	usart_hw->CTRLA.reg = ctrla;
     856:	4643      	mov	r3, r8
     858:	601f      	str	r7, [r3, #0]
     85a:	ab0a      	add	r3, sp, #40	; 0x28
     85c:	2280      	movs	r2, #128	; 0x80
     85e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     860:	2200      	movs	r2, #0
     862:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     864:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     866:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     868:	6a33      	ldr	r3, [r6, #32]
     86a:	9306      	str	r3, [sp, #24]
     86c:	6a73      	ldr	r3, [r6, #36]	; 0x24
     86e:	9307      	str	r3, [sp, #28]
     870:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     872:	9308      	str	r3, [sp, #32]
     874:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     876:	9303      	str	r3, [sp, #12]
     878:	9309      	str	r3, [sp, #36]	; 0x24
     87a:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     87c:	ae06      	add	r6, sp, #24
     87e:	e006      	b.n	88e <usart_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     880:	0020      	movs	r0, r4
     882:	4b21      	ldr	r3, [pc, #132]	; (908 <usart_init+0x240>)
     884:	4798      	blx	r3
     886:	e007      	b.n	898 <usart_init+0x1d0>
     888:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     88a:	2f04      	cmp	r7, #4
     88c:	d00d      	beq.n	8aa <usart_init+0x1e2>
     88e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     890:	00bb      	lsls	r3, r7, #2
     892:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     894:	2800      	cmp	r0, #0
     896:	d0f3      	beq.n	880 <usart_init+0x1b8>
		if (current_pinmux != PINMUX_UNUSED) {
     898:	1c43      	adds	r3, r0, #1
     89a:	d0f5      	beq.n	888 <usart_init+0x1c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     89c:	a90a      	add	r1, sp, #40	; 0x28
     89e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     8a0:	0c00      	lsrs	r0, r0, #16
     8a2:	b2c0      	uxtb	r0, r0
     8a4:	4b19      	ldr	r3, [pc, #100]	; (90c <usart_init+0x244>)
     8a6:	4798      	blx	r3
     8a8:	e7ee      	b.n	888 <usart_init+0x1c0>
		module->callback[i]            = NULL;
     8aa:	2300      	movs	r3, #0
     8ac:	60ab      	str	r3, [r5, #8]
     8ae:	60eb      	str	r3, [r5, #12]
     8b0:	612b      	str	r3, [r5, #16]
	module->tx_buffer_ptr              = NULL;
     8b2:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
     8b4:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
     8b6:	2200      	movs	r2, #0
     8b8:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
     8ba:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
     8bc:	3320      	adds	r3, #32
     8be:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     8c0:	3301      	adds	r3, #1
     8c2:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     8c4:	3301      	adds	r3, #1
     8c6:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     8c8:	3301      	adds	r3, #1
     8ca:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     8cc:	6828      	ldr	r0, [r5, #0]
     8ce:	4b05      	ldr	r3, [pc, #20]	; (8e4 <usart_init+0x21c>)
     8d0:	4798      	blx	r3
     8d2:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     8d4:	490e      	ldr	r1, [pc, #56]	; (910 <usart_init+0x248>)
     8d6:	4b0f      	ldr	r3, [pc, #60]	; (914 <usart_init+0x24c>)
     8d8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     8da:	00a4      	lsls	r4, r4, #2
     8dc:	4b0e      	ldr	r3, [pc, #56]	; (918 <usart_init+0x250>)
     8de:	50e5      	str	r5, [r4, r3]
	return status_code;
     8e0:	2000      	movs	r0, #0
     8e2:	e704      	b.n	6ee <usart_init+0x26>
     8e4:	00000691 	.word	0x00000691
     8e8:	40000400 	.word	0x40000400
     8ec:	000011a9 	.word	0x000011a9
     8f0:	0000111d 	.word	0x0000111d
     8f4:	000004cd 	.word	0x000004cd
     8f8:	000011c5 	.word	0x000011c5
     8fc:	0000040f 	.word	0x0000040f
     900:	00000439 	.word	0x00000439
     904:	41002000 	.word	0x41002000
     908:	00000519 	.word	0x00000519
     90c:	000012a1 	.word	0x000012a1
     910:	00000935 	.word	0x00000935
     914:	00000a5d 	.word	0x00000a5d
     918:	200000dc 	.word	0x200000dc

0000091c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     91c:	1c93      	adds	r3, r2, #2
     91e:	009b      	lsls	r3, r3, #2
     920:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     922:	2120      	movs	r1, #32
     924:	2301      	movs	r3, #1
     926:	4093      	lsls	r3, r2
     928:	001a      	movs	r2, r3
     92a:	5c43      	ldrb	r3, [r0, r1]
     92c:	4313      	orrs	r3, r2
     92e:	5443      	strb	r3, [r0, r1]
}
     930:	4770      	bx	lr
	...

00000934 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     936:	0080      	lsls	r0, r0, #2
     938:	4b46      	ldr	r3, [pc, #280]	; (a54 <_usart_interrupt_handler+0x120>)
     93a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     93c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     93e:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
     940:	b21b      	sxth	r3, r3
     942:	2b00      	cmp	r3, #0
     944:	dbfb      	blt.n	93e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     946:	7ba3      	ldrb	r3, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
     948:	7b66      	ldrb	r6, [r4, #13]
     94a:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     94c:	2320      	movs	r3, #32
     94e:	5ceb      	ldrb	r3, [r5, r3]
     950:	2221      	movs	r2, #33	; 0x21
     952:	5caf      	ldrb	r7, [r5, r2]
     954:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     956:	07f3      	lsls	r3, r6, #31
     958:	d522      	bpl.n	9a0 <_usart_interrupt_handler+0x6c>
		if (module->remaining_tx_buffer_length) {
     95a:	8beb      	ldrh	r3, [r5, #30]
     95c:	b29b      	uxth	r3, r3
     95e:	2b00      	cmp	r3, #0
     960:	d01c      	beq.n	99c <_usart_interrupt_handler+0x68>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     962:	69aa      	ldr	r2, [r5, #24]
     964:	7813      	ldrb	r3, [r2, #0]
     966:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     968:	1c51      	adds	r1, r2, #1
     96a:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     96c:	7969      	ldrb	r1, [r5, #5]
     96e:	2901      	cmp	r1, #1
     970:	d00e      	beq.n	990 <_usart_interrupt_handler+0x5c>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     972:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     974:	05db      	lsls	r3, r3, #23
     976:	0ddb      	lsrs	r3, r3, #23
     978:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
     97a:	8beb      	ldrh	r3, [r5, #30]
     97c:	3b01      	subs	r3, #1
     97e:	b29b      	uxth	r3, r3
     980:	83eb      	strh	r3, [r5, #30]
     982:	2b00      	cmp	r3, #0
     984:	d10c      	bne.n	9a0 <_usart_interrupt_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     986:	3301      	adds	r3, #1
     988:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     98a:	3301      	adds	r3, #1
     98c:	7363      	strb	r3, [r4, #13]
     98e:	e007      	b.n	9a0 <_usart_interrupt_handler+0x6c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     990:	7851      	ldrb	r1, [r2, #1]
     992:	0209      	lsls	r1, r1, #8
     994:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     996:	3202      	adds	r2, #2
     998:	61aa      	str	r2, [r5, #24]
     99a:	e7eb      	b.n	974 <_usart_interrupt_handler+0x40>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     99c:	2301      	movs	r3, #1
     99e:	7323      	strb	r3, [r4, #12]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     9a0:	07b3      	lsls	r3, r6, #30
     9a2:	d506      	bpl.n	9b2 <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     9a4:	2302      	movs	r3, #2
     9a6:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
     9a8:	2200      	movs	r2, #0
     9aa:	3321      	adds	r3, #33	; 0x21
     9ac:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     9ae:	07fb      	lsls	r3, r7, #31
     9b0:	d416      	bmi.n	9e0 <_usart_interrupt_handler+0xac>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     9b2:	0773      	lsls	r3, r6, #29
     9b4:	d54d      	bpl.n	a52 <_usart_interrupt_handler+0x11e>

		if (module->remaining_rx_buffer_length) {
     9b6:	8bab      	ldrh	r3, [r5, #28]
     9b8:	b29b      	uxth	r3, r3
     9ba:	2b00      	cmp	r3, #0
     9bc:	d047      	beq.n	a4e <_usart_interrupt_handler+0x11a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     9be:	8a23      	ldrh	r3, [r4, #16]
     9c0:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     9c2:	075a      	lsls	r2, r3, #29
     9c4:	d020      	beq.n	a08 <_usart_interrupt_handler+0xd4>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     9c6:	079a      	lsls	r2, r3, #30
     9c8:	d50e      	bpl.n	9e8 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     9ca:	221a      	movs	r2, #26
     9cc:	2322      	movs	r3, #34	; 0x22
     9ce:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     9d0:	3b20      	subs	r3, #32
     9d2:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     9d4:	077b      	lsls	r3, r7, #29
     9d6:	d53c      	bpl.n	a52 <_usart_interrupt_handler+0x11e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     9d8:	692b      	ldr	r3, [r5, #16]
     9da:	0028      	movs	r0, r5
     9dc:	4798      	blx	r3
     9de:	e038      	b.n	a52 <_usart_interrupt_handler+0x11e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     9e0:	0028      	movs	r0, r5
     9e2:	68ab      	ldr	r3, [r5, #8]
     9e4:	4798      	blx	r3
     9e6:	e7e4      	b.n	9b2 <_usart_interrupt_handler+0x7e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     9e8:	075a      	lsls	r2, r3, #29
     9ea:	d505      	bpl.n	9f8 <_usart_interrupt_handler+0xc4>
					module->rx_status = STATUS_ERR_OVERFLOW;
     9ec:	221e      	movs	r2, #30
     9ee:	2322      	movs	r3, #34	; 0x22
     9f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     9f2:	3b1e      	subs	r3, #30
     9f4:	8223      	strh	r3, [r4, #16]
     9f6:	e7ed      	b.n	9d4 <_usart_interrupt_handler+0xa0>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     9f8:	07db      	lsls	r3, r3, #31
     9fa:	d5eb      	bpl.n	9d4 <_usart_interrupt_handler+0xa0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     9fc:	2213      	movs	r2, #19
     9fe:	2322      	movs	r3, #34	; 0x22
     a00:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     a02:	3b21      	subs	r3, #33	; 0x21
     a04:	8223      	strh	r3, [r4, #16]
     a06:	e7e5      	b.n	9d4 <_usart_interrupt_handler+0xa0>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     a08:	8b23      	ldrh	r3, [r4, #24]
     a0a:	05db      	lsls	r3, r3, #23
     a0c:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     a0e:	b2da      	uxtb	r2, r3
     a10:	6969      	ldr	r1, [r5, #20]
     a12:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     a14:	696a      	ldr	r2, [r5, #20]
     a16:	1c51      	adds	r1, r2, #1
     a18:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a1a:	7969      	ldrb	r1, [r5, #5]
     a1c:	2901      	cmp	r1, #1
     a1e:	d010      	beq.n	a42 <_usart_interrupt_handler+0x10e>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     a20:	8bab      	ldrh	r3, [r5, #28]
     a22:	3b01      	subs	r3, #1
     a24:	b29b      	uxth	r3, r3
     a26:	83ab      	strh	r3, [r5, #28]
     a28:	2b00      	cmp	r3, #0
     a2a:	d112      	bne.n	a52 <_usart_interrupt_handler+0x11e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     a2c:	3304      	adds	r3, #4
     a2e:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
     a30:	2200      	movs	r2, #0
     a32:	331e      	adds	r3, #30
     a34:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     a36:	07bb      	lsls	r3, r7, #30
     a38:	d50b      	bpl.n	a52 <_usart_interrupt_handler+0x11e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     a3a:	68eb      	ldr	r3, [r5, #12]
     a3c:	0028      	movs	r0, r5
     a3e:	4798      	blx	r3
     a40:	e007      	b.n	a52 <_usart_interrupt_handler+0x11e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     a42:	0a1b      	lsrs	r3, r3, #8
     a44:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     a46:	696b      	ldr	r3, [r5, #20]
     a48:	3301      	adds	r3, #1
     a4a:	616b      	str	r3, [r5, #20]
     a4c:	e7e8      	b.n	a20 <_usart_interrupt_handler+0xec>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     a4e:	2304      	movs	r3, #4
     a50:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a54:	200000dc 	.word	0x200000dc

00000a58 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     a58:	4770      	bx	lr
	...

00000a5c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     a5e:	4b0a      	ldr	r3, [pc, #40]	; (a88 <_sercom_set_handler+0x2c>)
     a60:	781b      	ldrb	r3, [r3, #0]
     a62:	2b00      	cmp	r3, #0
     a64:	d10c      	bne.n	a80 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a66:	4f09      	ldr	r7, [pc, #36]	; (a8c <_sercom_set_handler+0x30>)
     a68:	4e09      	ldr	r6, [pc, #36]	; (a90 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     a6a:	4d0a      	ldr	r5, [pc, #40]	; (a94 <_sercom_set_handler+0x38>)
     a6c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a6e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     a70:	195a      	adds	r2, r3, r5
     a72:	6014      	str	r4, [r2, #0]
     a74:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a76:	2b18      	cmp	r3, #24
     a78:	d1f9      	bne.n	a6e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     a7a:	2201      	movs	r2, #1
     a7c:	4b02      	ldr	r3, [pc, #8]	; (a88 <_sercom_set_handler+0x2c>)
     a7e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     a80:	0080      	lsls	r0, r0, #2
     a82:	4b02      	ldr	r3, [pc, #8]	; (a8c <_sercom_set_handler+0x30>)
     a84:	50c1      	str	r1, [r0, r3]
}
     a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a88:	2000002a 	.word	0x2000002a
     a8c:	2000002c 	.word	0x2000002c
     a90:	00000a59 	.word	0x00000a59
     a94:	200000dc 	.word	0x200000dc

00000a98 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     a98:	b500      	push	{lr}
     a9a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     a9c:	2307      	movs	r3, #7
     a9e:	466a      	mov	r2, sp
     aa0:	7013      	strb	r3, [r2, #0]
     aa2:	3301      	adds	r3, #1
     aa4:	7053      	strb	r3, [r2, #1]
     aa6:	3301      	adds	r3, #1
     aa8:	7093      	strb	r3, [r2, #2]
     aaa:	3301      	adds	r3, #1
     aac:	70d3      	strb	r3, [r2, #3]
     aae:	3301      	adds	r3, #1
     ab0:	7113      	strb	r3, [r2, #4]
     ab2:	3301      	adds	r3, #1
     ab4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     ab6:	4b03      	ldr	r3, [pc, #12]	; (ac4 <_sercom_get_interrupt_vector+0x2c>)
     ab8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     aba:	466b      	mov	r3, sp
     abc:	5618      	ldrsb	r0, [r3, r0]
}
     abe:	b003      	add	sp, #12
     ac0:	bd00      	pop	{pc}
     ac2:	46c0      	nop			; (mov r8, r8)
     ac4:	00000691 	.word	0x00000691

00000ac8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     ac8:	b510      	push	{r4, lr}
     aca:	4b02      	ldr	r3, [pc, #8]	; (ad4 <SERCOM0_Handler+0xc>)
     acc:	681b      	ldr	r3, [r3, #0]
     ace:	2000      	movs	r0, #0
     ad0:	4798      	blx	r3
     ad2:	bd10      	pop	{r4, pc}
     ad4:	2000002c 	.word	0x2000002c

00000ad8 <SERCOM1_Handler>:
     ad8:	b510      	push	{r4, lr}
     ada:	4b02      	ldr	r3, [pc, #8]	; (ae4 <SERCOM1_Handler+0xc>)
     adc:	685b      	ldr	r3, [r3, #4]
     ade:	2001      	movs	r0, #1
     ae0:	4798      	blx	r3
     ae2:	bd10      	pop	{r4, pc}
     ae4:	2000002c 	.word	0x2000002c

00000ae8 <SERCOM2_Handler>:
     ae8:	b510      	push	{r4, lr}
     aea:	4b02      	ldr	r3, [pc, #8]	; (af4 <SERCOM2_Handler+0xc>)
     aec:	689b      	ldr	r3, [r3, #8]
     aee:	2002      	movs	r0, #2
     af0:	4798      	blx	r3
     af2:	bd10      	pop	{r4, pc}
     af4:	2000002c 	.word	0x2000002c

00000af8 <SERCOM3_Handler>:
     af8:	b510      	push	{r4, lr}
     afa:	4b02      	ldr	r3, [pc, #8]	; (b04 <SERCOM3_Handler+0xc>)
     afc:	68db      	ldr	r3, [r3, #12]
     afe:	2003      	movs	r0, #3
     b00:	4798      	blx	r3
     b02:	bd10      	pop	{r4, pc}
     b04:	2000002c 	.word	0x2000002c

00000b08 <SERCOM4_Handler>:
     b08:	b510      	push	{r4, lr}
     b0a:	4b02      	ldr	r3, [pc, #8]	; (b14 <SERCOM4_Handler+0xc>)
     b0c:	691b      	ldr	r3, [r3, #16]
     b0e:	2004      	movs	r0, #4
     b10:	4798      	blx	r3
     b12:	bd10      	pop	{r4, pc}
     b14:	2000002c 	.word	0x2000002c

00000b18 <SERCOM5_Handler>:
     b18:	b510      	push	{r4, lr}
     b1a:	4b02      	ldr	r3, [pc, #8]	; (b24 <SERCOM5_Handler+0xc>)
     b1c:	695b      	ldr	r3, [r3, #20]
     b1e:	2005      	movs	r0, #5
     b20:	4798      	blx	r3
     b22:	bd10      	pop	{r4, pc}
     b24:	2000002c 	.word	0x2000002c

00000b28 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     b28:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     b2a:	0080      	lsls	r0, r0, #2
     b2c:	4b16      	ldr	r3, [pc, #88]	; (b88 <_tc_interrupt_handler+0x60>)
     b2e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     b30:	6823      	ldr	r3, [r4, #0]
     b32:	7b9d      	ldrb	r5, [r3, #14]
     b34:	7e22      	ldrb	r2, [r4, #24]
     b36:	7e63      	ldrb	r3, [r4, #25]
     b38:	4013      	ands	r3, r2
     b3a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     b3c:	07eb      	lsls	r3, r5, #31
     b3e:	d406      	bmi.n	b4e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     b40:	07ab      	lsls	r3, r5, #30
     b42:	d40b      	bmi.n	b5c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     b44:	06eb      	lsls	r3, r5, #27
     b46:	d410      	bmi.n	b6a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     b48:	06ab      	lsls	r3, r5, #26
     b4a:	d415      	bmi.n	b78 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     b4c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     b4e:	0020      	movs	r0, r4
     b50:	68a3      	ldr	r3, [r4, #8]
     b52:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     b54:	2301      	movs	r3, #1
     b56:	6822      	ldr	r2, [r4, #0]
     b58:	7393      	strb	r3, [r2, #14]
     b5a:	e7f1      	b.n	b40 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     b5c:	0020      	movs	r0, r4
     b5e:	68e3      	ldr	r3, [r4, #12]
     b60:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     b62:	2302      	movs	r3, #2
     b64:	6822      	ldr	r2, [r4, #0]
     b66:	7393      	strb	r3, [r2, #14]
     b68:	e7ec      	b.n	b44 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     b6a:	0020      	movs	r0, r4
     b6c:	6923      	ldr	r3, [r4, #16]
     b6e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     b70:	2310      	movs	r3, #16
     b72:	6822      	ldr	r2, [r4, #0]
     b74:	7393      	strb	r3, [r2, #14]
     b76:	e7e7      	b.n	b48 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     b78:	0020      	movs	r0, r4
     b7a:	6963      	ldr	r3, [r4, #20]
     b7c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     b7e:	6823      	ldr	r3, [r4, #0]
     b80:	2220      	movs	r2, #32
     b82:	739a      	strb	r2, [r3, #14]
}
     b84:	e7e2      	b.n	b4c <_tc_interrupt_handler+0x24>
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	200000f4 	.word	0x200000f4

00000b8c <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     b8c:	b510      	push	{r4, lr}
     b8e:	2000      	movs	r0, #0
     b90:	4b01      	ldr	r3, [pc, #4]	; (b98 <TC0_Handler+0xc>)
     b92:	4798      	blx	r3
     b94:	bd10      	pop	{r4, pc}
     b96:	46c0      	nop			; (mov r8, r8)
     b98:	00000b29 	.word	0x00000b29

00000b9c <TC1_Handler>:
     b9c:	b510      	push	{r4, lr}
     b9e:	2001      	movs	r0, #1
     ba0:	4b01      	ldr	r3, [pc, #4]	; (ba8 <TC1_Handler+0xc>)
     ba2:	4798      	blx	r3
     ba4:	bd10      	pop	{r4, pc}
     ba6:	46c0      	nop			; (mov r8, r8)
     ba8:	00000b29 	.word	0x00000b29

00000bac <TC2_Handler>:
     bac:	b510      	push	{r4, lr}
     bae:	2002      	movs	r0, #2
     bb0:	4b01      	ldr	r3, [pc, #4]	; (bb8 <TC2_Handler+0xc>)
     bb2:	4798      	blx	r3
     bb4:	bd10      	pop	{r4, pc}
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	00000b29 	.word	0x00000b29

00000bbc <TC3_Handler>:
     bbc:	b510      	push	{r4, lr}
     bbe:	2003      	movs	r0, #3
     bc0:	4b01      	ldr	r3, [pc, #4]	; (bc8 <TC3_Handler+0xc>)
     bc2:	4798      	blx	r3
     bc4:	bd10      	pop	{r4, pc}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	00000b29 	.word	0x00000b29

00000bcc <TC4_Handler>:
     bcc:	b510      	push	{r4, lr}
     bce:	2004      	movs	r0, #4
     bd0:	4b01      	ldr	r3, [pc, #4]	; (bd8 <TC4_Handler+0xc>)
     bd2:	4798      	blx	r3
     bd4:	bd10      	pop	{r4, pc}
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	00000b29 	.word	0x00000b29

00000bdc <TC5_Handler>:
     bdc:	b510      	push	{r4, lr}
     bde:	2005      	movs	r0, #5
     be0:	4b01      	ldr	r3, [pc, #4]	; (be8 <TC5_Handler+0xc>)
     be2:	4798      	blx	r3
     be4:	bd10      	pop	{r4, pc}
     be6:	46c0      	nop			; (mov r8, r8)
     be8:	00000b29 	.word	0x00000b29

00000bec <TC6_Handler>:
     bec:	b510      	push	{r4, lr}
     bee:	2006      	movs	r0, #6
     bf0:	4b01      	ldr	r3, [pc, #4]	; (bf8 <TC6_Handler+0xc>)
     bf2:	4798      	blx	r3
     bf4:	bd10      	pop	{r4, pc}
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	00000b29 	.word	0x00000b29

00000bfc <TC7_Handler>:
     bfc:	b510      	push	{r4, lr}
     bfe:	2007      	movs	r0, #7
     c00:	4b01      	ldr	r3, [pc, #4]	; (c08 <TC7_Handler+0xc>)
     c02:	4798      	blx	r3
     c04:	bd10      	pop	{r4, pc}
     c06:	46c0      	nop			; (mov r8, r8)
     c08:	00000b29 	.word	0x00000b29

00000c0c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     c0c:	4770      	bx	lr
	...

00000c10 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     c10:	4b0c      	ldr	r3, [pc, #48]	; (c44 <cpu_irq_enter_critical+0x34>)
     c12:	681b      	ldr	r3, [r3, #0]
     c14:	2b00      	cmp	r3, #0
     c16:	d106      	bne.n	c26 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     c18:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     c1c:	2b00      	cmp	r3, #0
     c1e:	d007      	beq.n	c30 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     c20:	2200      	movs	r2, #0
     c22:	4b09      	ldr	r3, [pc, #36]	; (c48 <cpu_irq_enter_critical+0x38>)
     c24:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     c26:	4a07      	ldr	r2, [pc, #28]	; (c44 <cpu_irq_enter_critical+0x34>)
     c28:	6813      	ldr	r3, [r2, #0]
     c2a:	3301      	adds	r3, #1
     c2c:	6013      	str	r3, [r2, #0]
}
     c2e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     c30:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     c32:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     c36:	2200      	movs	r2, #0
     c38:	4b04      	ldr	r3, [pc, #16]	; (c4c <cpu_irq_enter_critical+0x3c>)
     c3a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     c3c:	3201      	adds	r2, #1
     c3e:	4b02      	ldr	r3, [pc, #8]	; (c48 <cpu_irq_enter_critical+0x38>)
     c40:	701a      	strb	r2, [r3, #0]
     c42:	e7f0      	b.n	c26 <cpu_irq_enter_critical+0x16>
     c44:	20000044 	.word	0x20000044
     c48:	20000048 	.word	0x20000048
     c4c:	20000008 	.word	0x20000008

00000c50 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     c50:	4b08      	ldr	r3, [pc, #32]	; (c74 <cpu_irq_leave_critical+0x24>)
     c52:	681a      	ldr	r2, [r3, #0]
     c54:	3a01      	subs	r2, #1
     c56:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     c58:	681b      	ldr	r3, [r3, #0]
     c5a:	2b00      	cmp	r3, #0
     c5c:	d109      	bne.n	c72 <cpu_irq_leave_critical+0x22>
     c5e:	4b06      	ldr	r3, [pc, #24]	; (c78 <cpu_irq_leave_critical+0x28>)
     c60:	781b      	ldrb	r3, [r3, #0]
     c62:	2b00      	cmp	r3, #0
     c64:	d005      	beq.n	c72 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     c66:	2201      	movs	r2, #1
     c68:	4b04      	ldr	r3, [pc, #16]	; (c7c <cpu_irq_leave_critical+0x2c>)
     c6a:	701a      	strb	r2, [r3, #0]
     c6c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c70:	b662      	cpsie	i
	}
}
     c72:	4770      	bx	lr
     c74:	20000044 	.word	0x20000044
     c78:	20000048 	.word	0x20000048
     c7c:	20000008 	.word	0x20000008

00000c80 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     c80:	b510      	push	{r4, lr}
	switch (clock_source) {
     c82:	2807      	cmp	r0, #7
     c84:	d803      	bhi.n	c8e <system_clock_source_get_hz+0xe>
     c86:	0080      	lsls	r0, r0, #2
     c88:	4b16      	ldr	r3, [pc, #88]	; (ce4 <system_clock_source_get_hz+0x64>)
     c8a:	581b      	ldr	r3, [r3, r0]
     c8c:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
     c8e:	2000      	movs	r0, #0
     c90:	e027      	b.n	ce2 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
     c92:	4b15      	ldr	r3, [pc, #84]	; (ce8 <system_clock_source_get_hz+0x68>)
     c94:	68d8      	ldr	r0, [r3, #12]
     c96:	e024      	b.n	ce2 <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     c98:	4b14      	ldr	r3, [pc, #80]	; (cec <system_clock_source_get_hz+0x6c>)
     c9a:	6a1b      	ldr	r3, [r3, #32]
     c9c:	059b      	lsls	r3, r3, #22
     c9e:	0f9b      	lsrs	r3, r3, #30
     ca0:	4813      	ldr	r0, [pc, #76]	; (cf0 <system_clock_source_get_hz+0x70>)
     ca2:	40d8      	lsrs	r0, r3
     ca4:	e01d      	b.n	ce2 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
     ca6:	4b10      	ldr	r3, [pc, #64]	; (ce8 <system_clock_source_get_hz+0x68>)
     ca8:	6918      	ldr	r0, [r3, #16]
     caa:	e01a      	b.n	ce2 <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     cac:	4b0e      	ldr	r3, [pc, #56]	; (ce8 <system_clock_source_get_hz+0x68>)
     cae:	681b      	ldr	r3, [r3, #0]
			return 0;
     cb0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     cb2:	079b      	lsls	r3, r3, #30
     cb4:	d515      	bpl.n	ce2 <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     cb6:	490d      	ldr	r1, [pc, #52]	; (cec <system_clock_source_get_hz+0x6c>)
     cb8:	2210      	movs	r2, #16
     cba:	68cb      	ldr	r3, [r1, #12]
     cbc:	421a      	tst	r2, r3
     cbe:	d0fc      	beq.n	cba <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     cc0:	4b09      	ldr	r3, [pc, #36]	; (ce8 <system_clock_source_get_hz+0x68>)
     cc2:	681b      	ldr	r3, [r3, #0]
     cc4:	075b      	lsls	r3, r3, #29
     cc6:	d401      	bmi.n	ccc <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     cc8:	480a      	ldr	r0, [pc, #40]	; (cf4 <system_clock_source_get_hz+0x74>)
     cca:	e00a      	b.n	ce2 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     ccc:	2000      	movs	r0, #0
     cce:	4b0a      	ldr	r3, [pc, #40]	; (cf8 <system_clock_source_get_hz+0x78>)
     cd0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     cd2:	4b05      	ldr	r3, [pc, #20]	; (ce8 <system_clock_source_get_hz+0x68>)
     cd4:	689b      	ldr	r3, [r3, #8]
     cd6:	041b      	lsls	r3, r3, #16
     cd8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     cda:	4358      	muls	r0, r3
     cdc:	e001      	b.n	ce2 <system_clock_source_get_hz+0x62>
		return 32768UL;
     cde:	2080      	movs	r0, #128	; 0x80
     ce0:	0200      	lsls	r0, r0, #8
	}
}
     ce2:	bd10      	pop	{r4, pc}
     ce4:	000015c0 	.word	0x000015c0
     ce8:	2000004c 	.word	0x2000004c
     cec:	40000800 	.word	0x40000800
     cf0:	007a1200 	.word	0x007a1200
     cf4:	02dc6c00 	.word	0x02dc6c00
     cf8:	000011c5 	.word	0x000011c5

00000cfc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     cfc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     cfe:	490c      	ldr	r1, [pc, #48]	; (d30 <system_clock_source_osc8m_set_config+0x34>)
     d00:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     d02:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     d04:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     d06:	7840      	ldrb	r0, [r0, #1]
     d08:	2201      	movs	r2, #1
     d0a:	4010      	ands	r0, r2
     d0c:	0180      	lsls	r0, r0, #6
     d0e:	2640      	movs	r6, #64	; 0x40
     d10:	43b3      	bics	r3, r6
     d12:	4303      	orrs	r3, r0
     d14:	402a      	ands	r2, r5
     d16:	01d2      	lsls	r2, r2, #7
     d18:	2080      	movs	r0, #128	; 0x80
     d1a:	4383      	bics	r3, r0
     d1c:	4313      	orrs	r3, r2
     d1e:	2203      	movs	r2, #3
     d20:	4022      	ands	r2, r4
     d22:	0212      	lsls	r2, r2, #8
     d24:	4803      	ldr	r0, [pc, #12]	; (d34 <system_clock_source_osc8m_set_config+0x38>)
     d26:	4003      	ands	r3, r0
     d28:	4313      	orrs	r3, r2
     d2a:	620b      	str	r3, [r1, #32]
}
     d2c:	bd70      	pop	{r4, r5, r6, pc}
     d2e:	46c0      	nop			; (mov r8, r8)
     d30:	40000800 	.word	0x40000800
     d34:	fffffcff 	.word	0xfffffcff

00000d38 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     d38:	b5f0      	push	{r4, r5, r6, r7, lr}
     d3a:	46de      	mov	lr, fp
     d3c:	4657      	mov	r7, sl
     d3e:	464e      	mov	r6, r9
     d40:	4645      	mov	r5, r8
     d42:	b5e0      	push	{r5, r6, r7, lr}
     d44:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
     d46:	4b26      	ldr	r3, [pc, #152]	; (de0 <system_clock_source_xosc32k_set_config+0xa8>)
     d48:	469b      	mov	fp, r3
     d4a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
     d4c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     d4e:	7800      	ldrb	r0, [r0, #0]
     d50:	4242      	negs	r2, r0
     d52:	4142      	adcs	r2, r0
     d54:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
     d56:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
     d58:	78ca      	ldrb	r2, [r1, #3]
     d5a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
     d5c:	790a      	ldrb	r2, [r1, #4]
     d5e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
     d60:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
     d62:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
     d64:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     d66:	688a      	ldr	r2, [r1, #8]
     d68:	491e      	ldr	r1, [pc, #120]	; (de4 <system_clock_source_xosc32k_set_config+0xac>)
     d6a:	610a      	str	r2, [r1, #16]

	SYSCTRL->XOSC32K = temp;
     d6c:	2101      	movs	r1, #1
     d6e:	464a      	mov	r2, r9
     d70:	0092      	lsls	r2, r2, #2
     d72:	4691      	mov	r9, r2
     d74:	2204      	movs	r2, #4
     d76:	4393      	bics	r3, r2
     d78:	464a      	mov	r2, r9
     d7a:	4313      	orrs	r3, r2
     d7c:	4642      	mov	r2, r8
     d7e:	400a      	ands	r2, r1
     d80:	00d2      	lsls	r2, r2, #3
     d82:	4690      	mov	r8, r2
     d84:	2208      	movs	r2, #8
     d86:	4393      	bics	r3, r2
     d88:	4642      	mov	r2, r8
     d8a:	4313      	orrs	r3, r2
     d8c:	4662      	mov	r2, ip
     d8e:	400a      	ands	r2, r1
     d90:	0112      	lsls	r2, r2, #4
     d92:	4694      	mov	ip, r2
     d94:	2210      	movs	r2, #16
     d96:	4393      	bics	r3, r2
     d98:	4662      	mov	r2, ip
     d9a:	4313      	orrs	r3, r2
     d9c:	4008      	ands	r0, r1
     d9e:	0140      	lsls	r0, r0, #5
     da0:	2220      	movs	r2, #32
     da2:	4393      	bics	r3, r2
     da4:	4303      	orrs	r3, r0
     da6:	400f      	ands	r7, r1
     da8:	01bf      	lsls	r7, r7, #6
     daa:	2040      	movs	r0, #64	; 0x40
     dac:	4383      	bics	r3, r0
     dae:	433b      	orrs	r3, r7
     db0:	400e      	ands	r6, r1
     db2:	01f6      	lsls	r6, r6, #7
     db4:	3040      	adds	r0, #64	; 0x40
     db6:	4383      	bics	r3, r0
     db8:	4333      	orrs	r3, r6
     dba:	3879      	subs	r0, #121	; 0x79
     dbc:	4005      	ands	r5, r0
     dbe:	022d      	lsls	r5, r5, #8
     dc0:	4809      	ldr	r0, [pc, #36]	; (de8 <system_clock_source_xosc32k_set_config+0xb0>)
     dc2:	4003      	ands	r3, r0
     dc4:	432b      	orrs	r3, r5
     dc6:	4021      	ands	r1, r4
     dc8:	0309      	lsls	r1, r1, #12
     dca:	4808      	ldr	r0, [pc, #32]	; (dec <system_clock_source_xosc32k_set_config+0xb4>)
     dcc:	4003      	ands	r3, r0
     dce:	430b      	orrs	r3, r1
     dd0:	465a      	mov	r2, fp
     dd2:	8293      	strh	r3, [r2, #20]
}
     dd4:	bc3c      	pop	{r2, r3, r4, r5}
     dd6:	4690      	mov	r8, r2
     dd8:	4699      	mov	r9, r3
     dda:	46a2      	mov	sl, r4
     ddc:	46ab      	mov	fp, r5
     dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
     de0:	40000800 	.word	0x40000800
     de4:	2000004c 	.word	0x2000004c
     de8:	fffff8ff 	.word	0xfffff8ff
     dec:	ffffefff 	.word	0xffffefff

00000df0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     df0:	2807      	cmp	r0, #7
     df2:	d803      	bhi.n	dfc <system_clock_source_enable+0xc>
     df4:	0080      	lsls	r0, r0, #2
     df6:	4b1e      	ldr	r3, [pc, #120]	; (e70 <system_clock_source_enable+0x80>)
     df8:	581b      	ldr	r3, [r3, r0]
     dfa:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     dfc:	2017      	movs	r0, #23
     dfe:	e036      	b.n	e6e <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     e00:	4a1c      	ldr	r2, [pc, #112]	; (e74 <system_clock_source_enable+0x84>)
     e02:	6a13      	ldr	r3, [r2, #32]
     e04:	2102      	movs	r1, #2
     e06:	430b      	orrs	r3, r1
     e08:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     e0a:	2000      	movs	r0, #0
     e0c:	e02f      	b.n	e6e <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     e0e:	4a19      	ldr	r2, [pc, #100]	; (e74 <system_clock_source_enable+0x84>)
     e10:	6993      	ldr	r3, [r2, #24]
     e12:	2102      	movs	r1, #2
     e14:	430b      	orrs	r3, r1
     e16:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     e18:	2000      	movs	r0, #0
		break;
     e1a:	e028      	b.n	e6e <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     e1c:	4a15      	ldr	r2, [pc, #84]	; (e74 <system_clock_source_enable+0x84>)
     e1e:	8a13      	ldrh	r3, [r2, #16]
     e20:	2102      	movs	r1, #2
     e22:	430b      	orrs	r3, r1
     e24:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     e26:	2000      	movs	r0, #0
		break;
     e28:	e021      	b.n	e6e <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     e2a:	4a12      	ldr	r2, [pc, #72]	; (e74 <system_clock_source_enable+0x84>)
     e2c:	8a93      	ldrh	r3, [r2, #20]
     e2e:	2102      	movs	r1, #2
     e30:	430b      	orrs	r3, r1
     e32:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     e34:	2000      	movs	r0, #0
		break;
     e36:	e01a      	b.n	e6e <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     e38:	4b0f      	ldr	r3, [pc, #60]	; (e78 <system_clock_source_enable+0x88>)
     e3a:	681a      	ldr	r2, [r3, #0]
     e3c:	2102      	movs	r1, #2
     e3e:	430a      	orrs	r2, r1
     e40:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     e42:	681b      	ldr	r3, [r3, #0]
     e44:	4a0d      	ldr	r2, [pc, #52]	; (e7c <system_clock_source_enable+0x8c>)
     e46:	4013      	ands	r3, r2
     e48:	4a0a      	ldr	r2, [pc, #40]	; (e74 <system_clock_source_enable+0x84>)
     e4a:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e4c:	0011      	movs	r1, r2
     e4e:	2210      	movs	r2, #16
     e50:	68cb      	ldr	r3, [r1, #12]
     e52:	421a      	tst	r2, r3
     e54:	d0fc      	beq.n	e50 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     e56:	4a08      	ldr	r2, [pc, #32]	; (e78 <system_clock_source_enable+0x88>)
     e58:	6891      	ldr	r1, [r2, #8]
     e5a:	4b06      	ldr	r3, [pc, #24]	; (e74 <system_clock_source_enable+0x84>)
     e5c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     e5e:	6851      	ldr	r1, [r2, #4]
     e60:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     e62:	6812      	ldr	r2, [r2, #0]
     e64:	b292      	uxth	r2, r2
     e66:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
     e68:	2000      	movs	r0, #0
     e6a:	e000      	b.n	e6e <system_clock_source_enable+0x7e>
		return STATUS_OK;
     e6c:	2000      	movs	r0, #0
}
     e6e:	4770      	bx	lr
     e70:	000015e0 	.word	0x000015e0
     e74:	40000800 	.word	0x40000800
     e78:	2000004c 	.word	0x2000004c
     e7c:	0000ff7f 	.word	0x0000ff7f

00000e80 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     e80:	b5f0      	push	{r4, r5, r6, r7, lr}
     e82:	b089      	sub	sp, #36	; 0x24
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e84:	22c2      	movs	r2, #194	; 0xc2
     e86:	00d2      	lsls	r2, r2, #3
     e88:	4b2f      	ldr	r3, [pc, #188]	; (f48 <system_clock_init+0xc8>)
     e8a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     e8c:	4a2f      	ldr	r2, [pc, #188]	; (f4c <system_clock_init+0xcc>)
     e8e:	6853      	ldr	r3, [r2, #4]
     e90:	211e      	movs	r1, #30
     e92:	438b      	bics	r3, r1
     e94:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
     e96:	2302      	movs	r3, #2
     e98:	466a      	mov	r2, sp
     e9a:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e9c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     e9e:	4d2c      	ldr	r5, [pc, #176]	; (f50 <system_clock_init+0xd0>)
     ea0:	b2e0      	uxtb	r0, r4
     ea2:	4669      	mov	r1, sp
     ea4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ea6:	3401      	adds	r4, #1
     ea8:	2c1c      	cmp	r4, #28
     eaa:	d1f9      	bne.n	ea0 <system_clock_init+0x20>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
     eac:	a804      	add	r0, sp, #16
     eae:	2300      	movs	r3, #0
     eb0:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
     eb2:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
     eb4:	2280      	movs	r2, #128	; 0x80
     eb6:	0212      	lsls	r2, r2, #8
     eb8:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
     eba:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
     ebc:	2201      	movs	r2, #1
     ebe:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
     ec0:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
     ec2:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
     ec4:	3205      	adds	r2, #5
     ec6:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
     ec8:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
     eca:	4b22      	ldr	r3, [pc, #136]	; (f54 <system_clock_init+0xd4>)
     ecc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
     ece:	2005      	movs	r0, #5
     ed0:	4b21      	ldr	r3, [pc, #132]	; (f58 <system_clock_init+0xd8>)
     ed2:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     ed4:	491c      	ldr	r1, [pc, #112]	; (f48 <system_clock_init+0xc8>)
     ed6:	2202      	movs	r2, #2
     ed8:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
     eda:	421a      	tst	r2, r3
     edc:	d0fc      	beq.n	ed8 <system_clock_init+0x58>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
     ede:	4a1a      	ldr	r2, [pc, #104]	; (f48 <system_clock_init+0xc8>)
     ee0:	8a93      	ldrh	r3, [r2, #20]
     ee2:	2180      	movs	r1, #128	; 0x80
     ee4:	430b      	orrs	r3, r1
     ee6:	8293      	strh	r3, [r2, #20]
	config->run_in_standby  = false;
     ee8:	a803      	add	r0, sp, #12
     eea:	2400      	movs	r4, #0
     eec:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     eee:	2501      	movs	r5, #1
     ef0:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     ef2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     ef4:	4b19      	ldr	r3, [pc, #100]	; (f5c <system_clock_init+0xdc>)
     ef6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     ef8:	2006      	movs	r0, #6
     efa:	4b17      	ldr	r3, [pc, #92]	; (f58 <system_clock_init+0xd8>)
     efc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     efe:	4b18      	ldr	r3, [pc, #96]	; (f60 <system_clock_init+0xe0>)
     f00:	4798      	blx	r3
	config->division_factor    = 1;
     f02:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     f04:	466b      	mov	r3, sp
     f06:	705c      	strb	r4, [r3, #1]
	config->run_in_standby     = false;
     f08:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
     f0a:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     f0c:	2305      	movs	r3, #5
     f0e:	466a      	mov	r2, sp
     f10:	7013      	strb	r3, [r2, #0]
     f12:	4669      	mov	r1, sp
     f14:	2001      	movs	r0, #1
     f16:	4f13      	ldr	r7, [pc, #76]	; (f64 <system_clock_init+0xe4>)
     f18:	47b8      	blx	r7
     f1a:	2001      	movs	r0, #1
     f1c:	4e12      	ldr	r6, [pc, #72]	; (f68 <system_clock_init+0xe8>)
     f1e:	47b0      	blx	r6
	PM->CPUSEL.reg = (uint32_t)divider;
     f20:	4b12      	ldr	r3, [pc, #72]	; (f6c <system_clock_init+0xec>)
     f22:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     f24:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     f26:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     f28:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
     f2a:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     f2c:	466b      	mov	r3, sp
     f2e:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     f30:	2306      	movs	r3, #6
     f32:	466a      	mov	r2, sp
     f34:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
     f36:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     f38:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     f3a:	4669      	mov	r1, sp
     f3c:	2000      	movs	r0, #0
     f3e:	47b8      	blx	r7
     f40:	2000      	movs	r0, #0
     f42:	47b0      	blx	r6
#endif
}
     f44:	b009      	add	sp, #36	; 0x24
     f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f48:	40000800 	.word	0x40000800
     f4c:	41004000 	.word	0x41004000
     f50:	000011a9 	.word	0x000011a9
     f54:	00000d39 	.word	0x00000d39
     f58:	00000df1 	.word	0x00000df1
     f5c:	00000cfd 	.word	0x00000cfd
     f60:	00000f71 	.word	0x00000f71
     f64:	00000f95 	.word	0x00000f95
     f68:	0000104d 	.word	0x0000104d
     f6c:	40000400 	.word	0x40000400

00000f70 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     f70:	4a06      	ldr	r2, [pc, #24]	; (f8c <system_gclk_init+0x1c>)
     f72:	6993      	ldr	r3, [r2, #24]
     f74:	2108      	movs	r1, #8
     f76:	430b      	orrs	r3, r1
     f78:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     f7a:	2201      	movs	r2, #1
     f7c:	4b04      	ldr	r3, [pc, #16]	; (f90 <system_gclk_init+0x20>)
     f7e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     f80:	0019      	movs	r1, r3
     f82:	780b      	ldrb	r3, [r1, #0]
     f84:	4213      	tst	r3, r2
     f86:	d1fc      	bne.n	f82 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     f88:	4770      	bx	lr
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	40000400 	.word	0x40000400
     f90:	40000c00 	.word	0x40000c00

00000f94 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     f94:	b570      	push	{r4, r5, r6, lr}
     f96:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     f98:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     f9a:	780d      	ldrb	r5, [r1, #0]
     f9c:	022d      	lsls	r5, r5, #8
     f9e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     fa0:	784b      	ldrb	r3, [r1, #1]
     fa2:	2b00      	cmp	r3, #0
     fa4:	d002      	beq.n	fac <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     fa6:	2380      	movs	r3, #128	; 0x80
     fa8:	02db      	lsls	r3, r3, #11
     faa:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     fac:	7a4b      	ldrb	r3, [r1, #9]
     fae:	2b00      	cmp	r3, #0
     fb0:	d002      	beq.n	fb8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     fb2:	2380      	movs	r3, #128	; 0x80
     fb4:	031b      	lsls	r3, r3, #12
     fb6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     fb8:	6848      	ldr	r0, [r1, #4]
     fba:	2801      	cmp	r0, #1
     fbc:	d910      	bls.n	fe0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     fbe:	1e43      	subs	r3, r0, #1
     fc0:	4218      	tst	r0, r3
     fc2:	d134      	bne.n	102e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     fc4:	2802      	cmp	r0, #2
     fc6:	d930      	bls.n	102a <system_gclk_gen_set_config+0x96>
     fc8:	2302      	movs	r3, #2
     fca:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     fcc:	3201      	adds	r2, #1
						mask <<= 1) {
     fce:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     fd0:	4298      	cmp	r0, r3
     fd2:	d8fb      	bhi.n	fcc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     fd4:	0212      	lsls	r2, r2, #8
     fd6:	4332      	orrs	r2, r6
     fd8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     fda:	2380      	movs	r3, #128	; 0x80
     fdc:	035b      	lsls	r3, r3, #13
     fde:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     fe0:	7a0b      	ldrb	r3, [r1, #8]
     fe2:	2b00      	cmp	r3, #0
     fe4:	d002      	beq.n	fec <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     fe6:	2380      	movs	r3, #128	; 0x80
     fe8:	039b      	lsls	r3, r3, #14
     fea:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fec:	4a13      	ldr	r2, [pc, #76]	; (103c <system_gclk_gen_set_config+0xa8>)
     fee:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     ff0:	b25b      	sxtb	r3, r3
     ff2:	2b00      	cmp	r3, #0
     ff4:	dbfb      	blt.n	fee <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
     ff6:	4b12      	ldr	r3, [pc, #72]	; (1040 <system_gclk_gen_set_config+0xac>)
     ff8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     ffa:	4b12      	ldr	r3, [pc, #72]	; (1044 <system_gclk_gen_set_config+0xb0>)
     ffc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ffe:	4a0f      	ldr	r2, [pc, #60]	; (103c <system_gclk_gen_set_config+0xa8>)
    1000:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1002:	b25b      	sxtb	r3, r3
    1004:	2b00      	cmp	r3, #0
    1006:	dbfb      	blt.n	1000 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1008:	4b0c      	ldr	r3, [pc, #48]	; (103c <system_gclk_gen_set_config+0xa8>)
    100a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    100c:	001a      	movs	r2, r3
    100e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1010:	b25b      	sxtb	r3, r3
    1012:	2b00      	cmp	r3, #0
    1014:	dbfb      	blt.n	100e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1016:	4a09      	ldr	r2, [pc, #36]	; (103c <system_gclk_gen_set_config+0xa8>)
    1018:	6853      	ldr	r3, [r2, #4]
    101a:	2180      	movs	r1, #128	; 0x80
    101c:	0249      	lsls	r1, r1, #9
    101e:	400b      	ands	r3, r1
    1020:	431d      	orrs	r5, r3
    1022:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1024:	4b08      	ldr	r3, [pc, #32]	; (1048 <system_gclk_gen_set_config+0xb4>)
    1026:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1028:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    102a:	2200      	movs	r2, #0
    102c:	e7d2      	b.n	fd4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    102e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1030:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1032:	2380      	movs	r3, #128	; 0x80
    1034:	029b      	lsls	r3, r3, #10
    1036:	431d      	orrs	r5, r3
    1038:	e7d2      	b.n	fe0 <system_gclk_gen_set_config+0x4c>
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	40000c00 	.word	0x40000c00
    1040:	00000c11 	.word	0x00000c11
    1044:	40000c08 	.word	0x40000c08
    1048:	00000c51 	.word	0x00000c51

0000104c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    104c:	b510      	push	{r4, lr}
    104e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1050:	4a0b      	ldr	r2, [pc, #44]	; (1080 <system_gclk_gen_enable+0x34>)
    1052:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1054:	b25b      	sxtb	r3, r3
    1056:	2b00      	cmp	r3, #0
    1058:	dbfb      	blt.n	1052 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    105a:	4b0a      	ldr	r3, [pc, #40]	; (1084 <system_gclk_gen_enable+0x38>)
    105c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    105e:	4b0a      	ldr	r3, [pc, #40]	; (1088 <system_gclk_gen_enable+0x3c>)
    1060:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1062:	4a07      	ldr	r2, [pc, #28]	; (1080 <system_gclk_gen_enable+0x34>)
    1064:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1066:	b25b      	sxtb	r3, r3
    1068:	2b00      	cmp	r3, #0
    106a:	dbfb      	blt.n	1064 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    106c:	4a04      	ldr	r2, [pc, #16]	; (1080 <system_gclk_gen_enable+0x34>)
    106e:	6851      	ldr	r1, [r2, #4]
    1070:	2380      	movs	r3, #128	; 0x80
    1072:	025b      	lsls	r3, r3, #9
    1074:	430b      	orrs	r3, r1
    1076:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1078:	4b04      	ldr	r3, [pc, #16]	; (108c <system_gclk_gen_enable+0x40>)
    107a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    107c:	bd10      	pop	{r4, pc}
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	40000c00 	.word	0x40000c00
    1084:	00000c11 	.word	0x00000c11
    1088:	40000c04 	.word	0x40000c04
    108c:	00000c51 	.word	0x00000c51

00001090 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1090:	b570      	push	{r4, r5, r6, lr}
    1092:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1094:	4a1a      	ldr	r2, [pc, #104]	; (1100 <system_gclk_gen_get_hz+0x70>)
    1096:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1098:	b25b      	sxtb	r3, r3
    109a:	2b00      	cmp	r3, #0
    109c:	dbfb      	blt.n	1096 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    109e:	4b19      	ldr	r3, [pc, #100]	; (1104 <system_gclk_gen_get_hz+0x74>)
    10a0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    10a2:	4b19      	ldr	r3, [pc, #100]	; (1108 <system_gclk_gen_get_hz+0x78>)
    10a4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10a6:	4a16      	ldr	r2, [pc, #88]	; (1100 <system_gclk_gen_get_hz+0x70>)
    10a8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    10aa:	b25b      	sxtb	r3, r3
    10ac:	2b00      	cmp	r3, #0
    10ae:	dbfb      	blt.n	10a8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    10b0:	4e13      	ldr	r6, [pc, #76]	; (1100 <system_gclk_gen_get_hz+0x70>)
    10b2:	6870      	ldr	r0, [r6, #4]
    10b4:	04c0      	lsls	r0, r0, #19
    10b6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    10b8:	4b14      	ldr	r3, [pc, #80]	; (110c <system_gclk_gen_get_hz+0x7c>)
    10ba:	4798      	blx	r3
    10bc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    10be:	4b12      	ldr	r3, [pc, #72]	; (1108 <system_gclk_gen_get_hz+0x78>)
    10c0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    10c2:	6876      	ldr	r6, [r6, #4]
    10c4:	02f6      	lsls	r6, r6, #11
    10c6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    10c8:	4b11      	ldr	r3, [pc, #68]	; (1110 <system_gclk_gen_get_hz+0x80>)
    10ca:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    10cc:	4a0c      	ldr	r2, [pc, #48]	; (1100 <system_gclk_gen_get_hz+0x70>)
    10ce:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    10d0:	b25b      	sxtb	r3, r3
    10d2:	2b00      	cmp	r3, #0
    10d4:	dbfb      	blt.n	10ce <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    10d6:	4b0a      	ldr	r3, [pc, #40]	; (1100 <system_gclk_gen_get_hz+0x70>)
    10d8:	689c      	ldr	r4, [r3, #8]
    10da:	0224      	lsls	r4, r4, #8
    10dc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    10de:	4b0d      	ldr	r3, [pc, #52]	; (1114 <system_gclk_gen_get_hz+0x84>)
    10e0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    10e2:	2e00      	cmp	r6, #0
    10e4:	d107      	bne.n	10f6 <system_gclk_gen_get_hz+0x66>
    10e6:	2c01      	cmp	r4, #1
    10e8:	d907      	bls.n	10fa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    10ea:	0021      	movs	r1, r4
    10ec:	0028      	movs	r0, r5
    10ee:	4b0a      	ldr	r3, [pc, #40]	; (1118 <system_gclk_gen_get_hz+0x88>)
    10f0:	4798      	blx	r3
    10f2:	0005      	movs	r5, r0
    10f4:	e001      	b.n	10fa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    10f6:	3401      	adds	r4, #1
    10f8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    10fa:	0028      	movs	r0, r5
    10fc:	bd70      	pop	{r4, r5, r6, pc}
    10fe:	46c0      	nop			; (mov r8, r8)
    1100:	40000c00 	.word	0x40000c00
    1104:	00000c11 	.word	0x00000c11
    1108:	40000c04 	.word	0x40000c04
    110c:	00000c81 	.word	0x00000c81
    1110:	40000c08 	.word	0x40000c08
    1114:	00000c51 	.word	0x00000c51
    1118:	000013f5 	.word	0x000013f5

0000111c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    111c:	b510      	push	{r4, lr}
    111e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1120:	4b06      	ldr	r3, [pc, #24]	; (113c <system_gclk_chan_enable+0x20>)
    1122:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1124:	4b06      	ldr	r3, [pc, #24]	; (1140 <system_gclk_chan_enable+0x24>)
    1126:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1128:	4a06      	ldr	r2, [pc, #24]	; (1144 <system_gclk_chan_enable+0x28>)
    112a:	8853      	ldrh	r3, [r2, #2]
    112c:	2180      	movs	r1, #128	; 0x80
    112e:	01c9      	lsls	r1, r1, #7
    1130:	430b      	orrs	r3, r1
    1132:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1134:	4b04      	ldr	r3, [pc, #16]	; (1148 <system_gclk_chan_enable+0x2c>)
    1136:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1138:	bd10      	pop	{r4, pc}
    113a:	46c0      	nop			; (mov r8, r8)
    113c:	00000c11 	.word	0x00000c11
    1140:	40000c02 	.word	0x40000c02
    1144:	40000c00 	.word	0x40000c00
    1148:	00000c51 	.word	0x00000c51

0000114c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    114c:	b510      	push	{r4, lr}
    114e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1150:	4b0f      	ldr	r3, [pc, #60]	; (1190 <system_gclk_chan_disable+0x44>)
    1152:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1154:	4b0f      	ldr	r3, [pc, #60]	; (1194 <system_gclk_chan_disable+0x48>)
    1156:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1158:	4a0f      	ldr	r2, [pc, #60]	; (1198 <system_gclk_chan_disable+0x4c>)
    115a:	8853      	ldrh	r3, [r2, #2]
    115c:	051b      	lsls	r3, r3, #20
    115e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1160:	8853      	ldrh	r3, [r2, #2]
    1162:	490e      	ldr	r1, [pc, #56]	; (119c <system_gclk_chan_disable+0x50>)
    1164:	400b      	ands	r3, r1
    1166:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1168:	8853      	ldrh	r3, [r2, #2]
    116a:	490d      	ldr	r1, [pc, #52]	; (11a0 <system_gclk_chan_disable+0x54>)
    116c:	400b      	ands	r3, r1
    116e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1170:	0011      	movs	r1, r2
    1172:	2280      	movs	r2, #128	; 0x80
    1174:	01d2      	lsls	r2, r2, #7
    1176:	884b      	ldrh	r3, [r1, #2]
    1178:	4213      	tst	r3, r2
    117a:	d1fc      	bne.n	1176 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    117c:	4906      	ldr	r1, [pc, #24]	; (1198 <system_gclk_chan_disable+0x4c>)
    117e:	884a      	ldrh	r2, [r1, #2]
    1180:	0203      	lsls	r3, r0, #8
    1182:	4806      	ldr	r0, [pc, #24]	; (119c <system_gclk_chan_disable+0x50>)
    1184:	4002      	ands	r2, r0
    1186:	4313      	orrs	r3, r2
    1188:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    118a:	4b06      	ldr	r3, [pc, #24]	; (11a4 <system_gclk_chan_disable+0x58>)
    118c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    118e:	bd10      	pop	{r4, pc}
    1190:	00000c11 	.word	0x00000c11
    1194:	40000c02 	.word	0x40000c02
    1198:	40000c00 	.word	0x40000c00
    119c:	fffff0ff 	.word	0xfffff0ff
    11a0:	ffffbfff 	.word	0xffffbfff
    11a4:	00000c51 	.word	0x00000c51

000011a8 <system_gclk_chan_set_config>:
{
    11a8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    11aa:	780c      	ldrb	r4, [r1, #0]
    11ac:	0224      	lsls	r4, r4, #8
    11ae:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    11b0:	4b02      	ldr	r3, [pc, #8]	; (11bc <system_gclk_chan_set_config+0x14>)
    11b2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    11b4:	b2a4      	uxth	r4, r4
    11b6:	4b02      	ldr	r3, [pc, #8]	; (11c0 <system_gclk_chan_set_config+0x18>)
    11b8:	805c      	strh	r4, [r3, #2]
}
    11ba:	bd10      	pop	{r4, pc}
    11bc:	0000114d 	.word	0x0000114d
    11c0:	40000c00 	.word	0x40000c00

000011c4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    11c4:	b510      	push	{r4, lr}
    11c6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    11c8:	4b06      	ldr	r3, [pc, #24]	; (11e4 <system_gclk_chan_get_hz+0x20>)
    11ca:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    11cc:	4b06      	ldr	r3, [pc, #24]	; (11e8 <system_gclk_chan_get_hz+0x24>)
    11ce:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    11d0:	4b06      	ldr	r3, [pc, #24]	; (11ec <system_gclk_chan_get_hz+0x28>)
    11d2:	885c      	ldrh	r4, [r3, #2]
    11d4:	0524      	lsls	r4, r4, #20
    11d6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    11d8:	4b05      	ldr	r3, [pc, #20]	; (11f0 <system_gclk_chan_get_hz+0x2c>)
    11da:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    11dc:	0020      	movs	r0, r4
    11de:	4b05      	ldr	r3, [pc, #20]	; (11f4 <system_gclk_chan_get_hz+0x30>)
    11e0:	4798      	blx	r3
}
    11e2:	bd10      	pop	{r4, pc}
    11e4:	00000c11 	.word	0x00000c11
    11e8:	40000c02 	.word	0x40000c02
    11ec:	40000c00 	.word	0x40000c00
    11f0:	00000c51 	.word	0x00000c51
    11f4:	00001091 	.word	0x00001091

000011f8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    11f8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    11fa:	78d3      	ldrb	r3, [r2, #3]
    11fc:	2b00      	cmp	r3, #0
    11fe:	d135      	bne.n	126c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1200:	7813      	ldrb	r3, [r2, #0]
    1202:	2b80      	cmp	r3, #128	; 0x80
    1204:	d029      	beq.n	125a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1206:	061b      	lsls	r3, r3, #24
    1208:	2480      	movs	r4, #128	; 0x80
    120a:	0264      	lsls	r4, r4, #9
    120c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    120e:	7854      	ldrb	r4, [r2, #1]
    1210:	2502      	movs	r5, #2
    1212:	43ac      	bics	r4, r5
    1214:	d106      	bne.n	1224 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1216:	7894      	ldrb	r4, [r2, #2]
    1218:	2c00      	cmp	r4, #0
    121a:	d120      	bne.n	125e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    121c:	2480      	movs	r4, #128	; 0x80
    121e:	02a4      	lsls	r4, r4, #10
    1220:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1222:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1224:	7854      	ldrb	r4, [r2, #1]
    1226:	3c01      	subs	r4, #1
    1228:	2c01      	cmp	r4, #1
    122a:	d91c      	bls.n	1266 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    122c:	040d      	lsls	r5, r1, #16
    122e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1230:	24a0      	movs	r4, #160	; 0xa0
    1232:	05e4      	lsls	r4, r4, #23
    1234:	432c      	orrs	r4, r5
    1236:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1238:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    123a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    123c:	24d0      	movs	r4, #208	; 0xd0
    123e:	0624      	lsls	r4, r4, #24
    1240:	432c      	orrs	r4, r5
    1242:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1244:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1246:	78d4      	ldrb	r4, [r2, #3]
    1248:	2c00      	cmp	r4, #0
    124a:	d122      	bne.n	1292 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    124c:	035b      	lsls	r3, r3, #13
    124e:	d51c      	bpl.n	128a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1250:	7893      	ldrb	r3, [r2, #2]
    1252:	2b01      	cmp	r3, #1
    1254:	d01e      	beq.n	1294 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1256:	6141      	str	r1, [r0, #20]
    1258:	e017      	b.n	128a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    125a:	2300      	movs	r3, #0
    125c:	e7d7      	b.n	120e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    125e:	24c0      	movs	r4, #192	; 0xc0
    1260:	02e4      	lsls	r4, r4, #11
    1262:	4323      	orrs	r3, r4
    1264:	e7dd      	b.n	1222 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1266:	4c0d      	ldr	r4, [pc, #52]	; (129c <_system_pinmux_config+0xa4>)
    1268:	4023      	ands	r3, r4
    126a:	e7df      	b.n	122c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    126c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    126e:	040c      	lsls	r4, r1, #16
    1270:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1272:	23a0      	movs	r3, #160	; 0xa0
    1274:	05db      	lsls	r3, r3, #23
    1276:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1278:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    127a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    127c:	23d0      	movs	r3, #208	; 0xd0
    127e:	061b      	lsls	r3, r3, #24
    1280:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1282:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1284:	78d3      	ldrb	r3, [r2, #3]
    1286:	2b00      	cmp	r3, #0
    1288:	d103      	bne.n	1292 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    128a:	7853      	ldrb	r3, [r2, #1]
    128c:	3b01      	subs	r3, #1
    128e:	2b01      	cmp	r3, #1
    1290:	d902      	bls.n	1298 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1292:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1294:	6181      	str	r1, [r0, #24]
    1296:	e7f8      	b.n	128a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1298:	6081      	str	r1, [r0, #8]
}
    129a:	e7fa      	b.n	1292 <_system_pinmux_config+0x9a>
    129c:	fffbffff 	.word	0xfffbffff

000012a0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    12a0:	b510      	push	{r4, lr}
    12a2:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    12a4:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    12a6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    12a8:	2900      	cmp	r1, #0
    12aa:	d104      	bne.n	12b6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    12ac:	0943      	lsrs	r3, r0, #5
    12ae:	01db      	lsls	r3, r3, #7
    12b0:	4905      	ldr	r1, [pc, #20]	; (12c8 <system_pinmux_pin_set_config+0x28>)
    12b2:	468c      	mov	ip, r1
    12b4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    12b6:	241f      	movs	r4, #31
    12b8:	4020      	ands	r0, r4
    12ba:	2101      	movs	r1, #1
    12bc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    12be:	0018      	movs	r0, r3
    12c0:	4b02      	ldr	r3, [pc, #8]	; (12cc <system_pinmux_pin_set_config+0x2c>)
    12c2:	4798      	blx	r3
}
    12c4:	bd10      	pop	{r4, pc}
    12c6:	46c0      	nop			; (mov r8, r8)
    12c8:	41004400 	.word	0x41004400
    12cc:	000011f9 	.word	0x000011f9

000012d0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    12d0:	4770      	bx	lr
	...

000012d4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    12d4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    12d6:	4b05      	ldr	r3, [pc, #20]	; (12ec <system_init+0x18>)
    12d8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    12da:	4b05      	ldr	r3, [pc, #20]	; (12f0 <system_init+0x1c>)
    12dc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    12de:	4b05      	ldr	r3, [pc, #20]	; (12f4 <system_init+0x20>)
    12e0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    12e2:	4b05      	ldr	r3, [pc, #20]	; (12f8 <system_init+0x24>)
    12e4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    12e6:	4b05      	ldr	r3, [pc, #20]	; (12fc <system_init+0x28>)
    12e8:	4798      	blx	r3
}
    12ea:	bd10      	pop	{r4, pc}
    12ec:	00000e81 	.word	0x00000e81
    12f0:	00000c0d 	.word	0x00000c0d
    12f4:	000012d1 	.word	0x000012d1
    12f8:	00000285 	.word	0x00000285
    12fc:	000012d1 	.word	0x000012d1

00001300 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1300:	e7fe      	b.n	1300 <Dummy_Handler>
	...

00001304 <Reset_Handler>:
{
    1304:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1306:	4a1a      	ldr	r2, [pc, #104]	; (1370 <Reset_Handler+0x6c>)
    1308:	4b1a      	ldr	r3, [pc, #104]	; (1374 <Reset_Handler+0x70>)
    130a:	429a      	cmp	r2, r3
    130c:	d011      	beq.n	1332 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    130e:	001a      	movs	r2, r3
    1310:	4b19      	ldr	r3, [pc, #100]	; (1378 <Reset_Handler+0x74>)
    1312:	429a      	cmp	r2, r3
    1314:	d20d      	bcs.n	1332 <Reset_Handler+0x2e>
    1316:	4a19      	ldr	r2, [pc, #100]	; (137c <Reset_Handler+0x78>)
    1318:	3303      	adds	r3, #3
    131a:	1a9b      	subs	r3, r3, r2
    131c:	089b      	lsrs	r3, r3, #2
    131e:	3301      	adds	r3, #1
    1320:	009b      	lsls	r3, r3, #2
    1322:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1324:	4813      	ldr	r0, [pc, #76]	; (1374 <Reset_Handler+0x70>)
    1326:	4912      	ldr	r1, [pc, #72]	; (1370 <Reset_Handler+0x6c>)
    1328:	588c      	ldr	r4, [r1, r2]
    132a:	5084      	str	r4, [r0, r2]
    132c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    132e:	429a      	cmp	r2, r3
    1330:	d1fa      	bne.n	1328 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1332:	4a13      	ldr	r2, [pc, #76]	; (1380 <Reset_Handler+0x7c>)
    1334:	4b13      	ldr	r3, [pc, #76]	; (1384 <Reset_Handler+0x80>)
    1336:	429a      	cmp	r2, r3
    1338:	d20a      	bcs.n	1350 <Reset_Handler+0x4c>
    133a:	43d3      	mvns	r3, r2
    133c:	4911      	ldr	r1, [pc, #68]	; (1384 <Reset_Handler+0x80>)
    133e:	185b      	adds	r3, r3, r1
    1340:	2103      	movs	r1, #3
    1342:	438b      	bics	r3, r1
    1344:	3304      	adds	r3, #4
    1346:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1348:	2100      	movs	r1, #0
    134a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    134c:	4293      	cmp	r3, r2
    134e:	d1fc      	bne.n	134a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1350:	4a0d      	ldr	r2, [pc, #52]	; (1388 <Reset_Handler+0x84>)
    1352:	21ff      	movs	r1, #255	; 0xff
    1354:	4b0d      	ldr	r3, [pc, #52]	; (138c <Reset_Handler+0x88>)
    1356:	438b      	bics	r3, r1
    1358:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    135a:	4a0d      	ldr	r2, [pc, #52]	; (1390 <Reset_Handler+0x8c>)
    135c:	6853      	ldr	r3, [r2, #4]
    135e:	397f      	subs	r1, #127	; 0x7f
    1360:	430b      	orrs	r3, r1
    1362:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1364:	4b0b      	ldr	r3, [pc, #44]	; (1394 <Reset_Handler+0x90>)
    1366:	4798      	blx	r3
        main();
    1368:	4b0b      	ldr	r3, [pc, #44]	; (1398 <Reset_Handler+0x94>)
    136a:	4798      	blx	r3
    136c:	e7fe      	b.n	136c <Reset_Handler+0x68>
    136e:	46c0      	nop			; (mov r8, r8)
    1370:	00001620 	.word	0x00001620
    1374:	20000000 	.word	0x20000000
    1378:	2000000c 	.word	0x2000000c
    137c:	20000004 	.word	0x20000004
    1380:	2000000c 	.word	0x2000000c
    1384:	20000114 	.word	0x20000114
    1388:	e000ed00 	.word	0xe000ed00
    138c:	00000000 	.word	0x00000000
    1390:	41004000 	.word	0x41004000
    1394:	00001561 	.word	0x00001561
    1398:	000013c9 	.word	0x000013c9

0000139c <LedInit>:
	port_pin_set_config(BUZZER_PIN,&pin_config);
	port_pin_set_output_level(BUZZER_PIN,false);
}

void LedInit(void)
{
    139c:	b500      	push	{lr}
    139e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    13a0:	a901      	add	r1, sp, #4
    13a2:	2301      	movs	r3, #1
    13a4:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    13a6:	2200      	movs	r2, #0
    13a8:	708a      	strb	r2, [r1, #2]
	struct port_config pin_config;
	port_get_config_defaults(&pin_config);
	
	pin_config.direction = PORT_PIN_DIR_OUTPUT;
    13aa:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED_PIN,&pin_config);
    13ac:	202b      	movs	r0, #43	; 0x2b
    13ae:	4b04      	ldr	r3, [pc, #16]	; (13c0 <LedInit+0x24>)
    13b0:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    13b2:	2280      	movs	r2, #128	; 0x80
    13b4:	0112      	lsls	r2, r2, #4
    13b6:	4b03      	ldr	r3, [pc, #12]	; (13c4 <LedInit+0x28>)
    13b8:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_PIN,true);
	
}
    13ba:	b003      	add	sp, #12
    13bc:	bd00      	pop	{pc}
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	00000331 	.word	0x00000331
    13c4:	41004480 	.word	0x41004480

000013c8 <main>:


int main (void)
{
    13c8:	b510      	push	{r4, lr}
	system_init();
    13ca:	4b05      	ldr	r3, [pc, #20]	; (13e0 <main+0x18>)
    13cc:	4798      	blx	r3
	//BuzzerInit();
	LedInit();
    13ce:	4b05      	ldr	r3, [pc, #20]	; (13e4 <main+0x1c>)
    13d0:	4798      	blx	r3
	delay_init();
    13d2:	4b05      	ldr	r3, [pc, #20]	; (13e8 <main+0x20>)
    13d4:	4798      	blx	r3
	//configure_tc();
	//configure_tc_callbacks();
	//
	//configureBLE_usart();
	//configureBLE_usart_callbacks();
	configure_wifi_usart();
    13d6:	4b05      	ldr	r3, [pc, #20]	; (13ec <main+0x24>)
    13d8:	4798      	blx	r3
	configure_wifi_callbacks();
    13da:	4b05      	ldr	r3, [pc, #20]	; (13f0 <main+0x28>)
    13dc:	4798      	blx	r3
    13de:	e7fe      	b.n	13de <main+0x16>
    13e0:	000012d5 	.word	0x000012d5
    13e4:	0000139d 	.word	0x0000139d
    13e8:	000002f1 	.word	0x000002f1
    13ec:	00000109 	.word	0x00000109
    13f0:	000001e5 	.word	0x000001e5

000013f4 <__udivsi3>:
    13f4:	2200      	movs	r2, #0
    13f6:	0843      	lsrs	r3, r0, #1
    13f8:	428b      	cmp	r3, r1
    13fa:	d374      	bcc.n	14e6 <__udivsi3+0xf2>
    13fc:	0903      	lsrs	r3, r0, #4
    13fe:	428b      	cmp	r3, r1
    1400:	d35f      	bcc.n	14c2 <__udivsi3+0xce>
    1402:	0a03      	lsrs	r3, r0, #8
    1404:	428b      	cmp	r3, r1
    1406:	d344      	bcc.n	1492 <__udivsi3+0x9e>
    1408:	0b03      	lsrs	r3, r0, #12
    140a:	428b      	cmp	r3, r1
    140c:	d328      	bcc.n	1460 <__udivsi3+0x6c>
    140e:	0c03      	lsrs	r3, r0, #16
    1410:	428b      	cmp	r3, r1
    1412:	d30d      	bcc.n	1430 <__udivsi3+0x3c>
    1414:	22ff      	movs	r2, #255	; 0xff
    1416:	0209      	lsls	r1, r1, #8
    1418:	ba12      	rev	r2, r2
    141a:	0c03      	lsrs	r3, r0, #16
    141c:	428b      	cmp	r3, r1
    141e:	d302      	bcc.n	1426 <__udivsi3+0x32>
    1420:	1212      	asrs	r2, r2, #8
    1422:	0209      	lsls	r1, r1, #8
    1424:	d065      	beq.n	14f2 <__udivsi3+0xfe>
    1426:	0b03      	lsrs	r3, r0, #12
    1428:	428b      	cmp	r3, r1
    142a:	d319      	bcc.n	1460 <__udivsi3+0x6c>
    142c:	e000      	b.n	1430 <__udivsi3+0x3c>
    142e:	0a09      	lsrs	r1, r1, #8
    1430:	0bc3      	lsrs	r3, r0, #15
    1432:	428b      	cmp	r3, r1
    1434:	d301      	bcc.n	143a <__udivsi3+0x46>
    1436:	03cb      	lsls	r3, r1, #15
    1438:	1ac0      	subs	r0, r0, r3
    143a:	4152      	adcs	r2, r2
    143c:	0b83      	lsrs	r3, r0, #14
    143e:	428b      	cmp	r3, r1
    1440:	d301      	bcc.n	1446 <__udivsi3+0x52>
    1442:	038b      	lsls	r3, r1, #14
    1444:	1ac0      	subs	r0, r0, r3
    1446:	4152      	adcs	r2, r2
    1448:	0b43      	lsrs	r3, r0, #13
    144a:	428b      	cmp	r3, r1
    144c:	d301      	bcc.n	1452 <__udivsi3+0x5e>
    144e:	034b      	lsls	r3, r1, #13
    1450:	1ac0      	subs	r0, r0, r3
    1452:	4152      	adcs	r2, r2
    1454:	0b03      	lsrs	r3, r0, #12
    1456:	428b      	cmp	r3, r1
    1458:	d301      	bcc.n	145e <__udivsi3+0x6a>
    145a:	030b      	lsls	r3, r1, #12
    145c:	1ac0      	subs	r0, r0, r3
    145e:	4152      	adcs	r2, r2
    1460:	0ac3      	lsrs	r3, r0, #11
    1462:	428b      	cmp	r3, r1
    1464:	d301      	bcc.n	146a <__udivsi3+0x76>
    1466:	02cb      	lsls	r3, r1, #11
    1468:	1ac0      	subs	r0, r0, r3
    146a:	4152      	adcs	r2, r2
    146c:	0a83      	lsrs	r3, r0, #10
    146e:	428b      	cmp	r3, r1
    1470:	d301      	bcc.n	1476 <__udivsi3+0x82>
    1472:	028b      	lsls	r3, r1, #10
    1474:	1ac0      	subs	r0, r0, r3
    1476:	4152      	adcs	r2, r2
    1478:	0a43      	lsrs	r3, r0, #9
    147a:	428b      	cmp	r3, r1
    147c:	d301      	bcc.n	1482 <__udivsi3+0x8e>
    147e:	024b      	lsls	r3, r1, #9
    1480:	1ac0      	subs	r0, r0, r3
    1482:	4152      	adcs	r2, r2
    1484:	0a03      	lsrs	r3, r0, #8
    1486:	428b      	cmp	r3, r1
    1488:	d301      	bcc.n	148e <__udivsi3+0x9a>
    148a:	020b      	lsls	r3, r1, #8
    148c:	1ac0      	subs	r0, r0, r3
    148e:	4152      	adcs	r2, r2
    1490:	d2cd      	bcs.n	142e <__udivsi3+0x3a>
    1492:	09c3      	lsrs	r3, r0, #7
    1494:	428b      	cmp	r3, r1
    1496:	d301      	bcc.n	149c <__udivsi3+0xa8>
    1498:	01cb      	lsls	r3, r1, #7
    149a:	1ac0      	subs	r0, r0, r3
    149c:	4152      	adcs	r2, r2
    149e:	0983      	lsrs	r3, r0, #6
    14a0:	428b      	cmp	r3, r1
    14a2:	d301      	bcc.n	14a8 <__udivsi3+0xb4>
    14a4:	018b      	lsls	r3, r1, #6
    14a6:	1ac0      	subs	r0, r0, r3
    14a8:	4152      	adcs	r2, r2
    14aa:	0943      	lsrs	r3, r0, #5
    14ac:	428b      	cmp	r3, r1
    14ae:	d301      	bcc.n	14b4 <__udivsi3+0xc0>
    14b0:	014b      	lsls	r3, r1, #5
    14b2:	1ac0      	subs	r0, r0, r3
    14b4:	4152      	adcs	r2, r2
    14b6:	0903      	lsrs	r3, r0, #4
    14b8:	428b      	cmp	r3, r1
    14ba:	d301      	bcc.n	14c0 <__udivsi3+0xcc>
    14bc:	010b      	lsls	r3, r1, #4
    14be:	1ac0      	subs	r0, r0, r3
    14c0:	4152      	adcs	r2, r2
    14c2:	08c3      	lsrs	r3, r0, #3
    14c4:	428b      	cmp	r3, r1
    14c6:	d301      	bcc.n	14cc <__udivsi3+0xd8>
    14c8:	00cb      	lsls	r3, r1, #3
    14ca:	1ac0      	subs	r0, r0, r3
    14cc:	4152      	adcs	r2, r2
    14ce:	0883      	lsrs	r3, r0, #2
    14d0:	428b      	cmp	r3, r1
    14d2:	d301      	bcc.n	14d8 <__udivsi3+0xe4>
    14d4:	008b      	lsls	r3, r1, #2
    14d6:	1ac0      	subs	r0, r0, r3
    14d8:	4152      	adcs	r2, r2
    14da:	0843      	lsrs	r3, r0, #1
    14dc:	428b      	cmp	r3, r1
    14de:	d301      	bcc.n	14e4 <__udivsi3+0xf0>
    14e0:	004b      	lsls	r3, r1, #1
    14e2:	1ac0      	subs	r0, r0, r3
    14e4:	4152      	adcs	r2, r2
    14e6:	1a41      	subs	r1, r0, r1
    14e8:	d200      	bcs.n	14ec <__udivsi3+0xf8>
    14ea:	4601      	mov	r1, r0
    14ec:	4152      	adcs	r2, r2
    14ee:	4610      	mov	r0, r2
    14f0:	4770      	bx	lr
    14f2:	e7ff      	b.n	14f4 <__udivsi3+0x100>
    14f4:	b501      	push	{r0, lr}
    14f6:	2000      	movs	r0, #0
    14f8:	f000 f806 	bl	1508 <__aeabi_idiv0>
    14fc:	bd02      	pop	{r1, pc}
    14fe:	46c0      	nop			; (mov r8, r8)

00001500 <__aeabi_uidivmod>:
    1500:	2900      	cmp	r1, #0
    1502:	d0f7      	beq.n	14f4 <__udivsi3+0x100>
    1504:	e776      	b.n	13f4 <__udivsi3>
    1506:	4770      	bx	lr

00001508 <__aeabi_idiv0>:
    1508:	4770      	bx	lr
    150a:	46c0      	nop			; (mov r8, r8)

0000150c <__aeabi_lmul>:
    150c:	b5f0      	push	{r4, r5, r6, r7, lr}
    150e:	46ce      	mov	lr, r9
    1510:	4647      	mov	r7, r8
    1512:	0415      	lsls	r5, r2, #16
    1514:	0c2d      	lsrs	r5, r5, #16
    1516:	002e      	movs	r6, r5
    1518:	b580      	push	{r7, lr}
    151a:	0407      	lsls	r7, r0, #16
    151c:	0c14      	lsrs	r4, r2, #16
    151e:	0c3f      	lsrs	r7, r7, #16
    1520:	4699      	mov	r9, r3
    1522:	0c03      	lsrs	r3, r0, #16
    1524:	437e      	muls	r6, r7
    1526:	435d      	muls	r5, r3
    1528:	4367      	muls	r7, r4
    152a:	4363      	muls	r3, r4
    152c:	197f      	adds	r7, r7, r5
    152e:	0c34      	lsrs	r4, r6, #16
    1530:	19e4      	adds	r4, r4, r7
    1532:	469c      	mov	ip, r3
    1534:	42a5      	cmp	r5, r4
    1536:	d903      	bls.n	1540 <__aeabi_lmul+0x34>
    1538:	2380      	movs	r3, #128	; 0x80
    153a:	025b      	lsls	r3, r3, #9
    153c:	4698      	mov	r8, r3
    153e:	44c4      	add	ip, r8
    1540:	464b      	mov	r3, r9
    1542:	4351      	muls	r1, r2
    1544:	4343      	muls	r3, r0
    1546:	0436      	lsls	r6, r6, #16
    1548:	0c36      	lsrs	r6, r6, #16
    154a:	0c25      	lsrs	r5, r4, #16
    154c:	0424      	lsls	r4, r4, #16
    154e:	4465      	add	r5, ip
    1550:	19a4      	adds	r4, r4, r6
    1552:	1859      	adds	r1, r3, r1
    1554:	1949      	adds	r1, r1, r5
    1556:	0020      	movs	r0, r4
    1558:	bc0c      	pop	{r2, r3}
    155a:	4690      	mov	r8, r2
    155c:	4699      	mov	r9, r3
    155e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001560 <__libc_init_array>:
    1560:	b570      	push	{r4, r5, r6, lr}
    1562:	2600      	movs	r6, #0
    1564:	4d0c      	ldr	r5, [pc, #48]	; (1598 <__libc_init_array+0x38>)
    1566:	4c0d      	ldr	r4, [pc, #52]	; (159c <__libc_init_array+0x3c>)
    1568:	1b64      	subs	r4, r4, r5
    156a:	10a4      	asrs	r4, r4, #2
    156c:	42a6      	cmp	r6, r4
    156e:	d109      	bne.n	1584 <__libc_init_array+0x24>
    1570:	2600      	movs	r6, #0
    1572:	f000 f845 	bl	1600 <_init>
    1576:	4d0a      	ldr	r5, [pc, #40]	; (15a0 <__libc_init_array+0x40>)
    1578:	4c0a      	ldr	r4, [pc, #40]	; (15a4 <__libc_init_array+0x44>)
    157a:	1b64      	subs	r4, r4, r5
    157c:	10a4      	asrs	r4, r4, #2
    157e:	42a6      	cmp	r6, r4
    1580:	d105      	bne.n	158e <__libc_init_array+0x2e>
    1582:	bd70      	pop	{r4, r5, r6, pc}
    1584:	00b3      	lsls	r3, r6, #2
    1586:	58eb      	ldr	r3, [r5, r3]
    1588:	4798      	blx	r3
    158a:	3601      	adds	r6, #1
    158c:	e7ee      	b.n	156c <__libc_init_array+0xc>
    158e:	00b3      	lsls	r3, r6, #2
    1590:	58eb      	ldr	r3, [r5, r3]
    1592:	4798      	blx	r3
    1594:	3601      	adds	r6, #1
    1596:	e7f2      	b.n	157e <__libc_init_array+0x1e>
    1598:	0000160c 	.word	0x0000160c
    159c:	0000160c 	.word	0x0000160c
    15a0:	0000160c 	.word	0x0000160c
    15a4:	00001610 	.word	0x00001610
    15a8:	42000800 	.word	0x42000800
    15ac:	42000c00 	.word	0x42000c00
    15b0:	42001000 	.word	0x42001000
    15b4:	42001400 	.word	0x42001400
    15b8:	42001800 	.word	0x42001800
    15bc:	42001c00 	.word	0x42001c00
    15c0:	00000c92 	.word	0x00000c92
    15c4:	00000c8e 	.word	0x00000c8e
    15c8:	00000c8e 	.word	0x00000c8e
    15cc:	00000cde 	.word	0x00000cde
    15d0:	00000cde 	.word	0x00000cde
    15d4:	00000ca6 	.word	0x00000ca6
    15d8:	00000c98 	.word	0x00000c98
    15dc:	00000cac 	.word	0x00000cac
    15e0:	00000e1c 	.word	0x00000e1c
    15e4:	00000dfc 	.word	0x00000dfc
    15e8:	00000dfc 	.word	0x00000dfc
    15ec:	00000e6c 	.word	0x00000e6c
    15f0:	00000e0e 	.word	0x00000e0e
    15f4:	00000e2a 	.word	0x00000e2a
    15f8:	00000e00 	.word	0x00000e00
    15fc:	00000e38 	.word	0x00000e38

00001600 <_init>:
    1600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1606:	bc08      	pop	{r3}
    1608:	469e      	mov	lr, r3
    160a:	4770      	bx	lr

0000160c <__init_array_start>:
    160c:	000000cd 	.word	0x000000cd

00001610 <_fini>:
    1610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1612:	46c0      	nop			; (mov r8, r8)
    1614:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1616:	bc08      	pop	{r3}
    1618:	469e      	mov	lr, r3
    161a:	4770      	bx	lr

0000161c <__fini_array_start>:
    161c:	000000a5 	.word	0x000000a5
